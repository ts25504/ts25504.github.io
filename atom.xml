<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>B LOG</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2018-05-16T09:01:02.368Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>唐盛</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Java常用容器类盘点</title>
    <link href="http://yoursite.com/2017/04/10/Java%E5%B8%B8%E7%94%A8%E5%AE%B9%E5%99%A8%E7%B1%BB%E7%9B%98%E7%82%B9/"/>
    <id>http://yoursite.com/2017/04/10/Java常用容器类盘点/</id>
    <published>2017-04-10T12:53:12.000Z</published>
    <updated>2018-05-16T09:01:02.368Z</updated>
    
    <content type="html"><![CDATA[<h2 id="ArrayList"><a href="#ArrayList" class="headerlink" title="ArrayList"></a>ArrayList</h2><h3 id="底层实现"><a href="#底层实现" class="headerlink" title="底层实现"></a>底层实现</h3><p>ArrayList的底层实现为Object[]数组。Add和Remove操作多使用System.arrayCopy()方法。随机访问效率高，插入和删除效率差。</p><h3 id="线程安全性"><a href="#线程安全性" class="headerlink" title="线程安全性"></a>线程安全性</h3><p>非线程安全</p><h3 id="扩容机制"><a href="#扩容机制" class="headerlink" title="扩容机制"></a>扩容机制</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * The minimum amount by which the capacity of an ArrayList will increase.</span></span><br><span class="line"><span class="comment"> * This tuning parameter controls a time-space tradeoff. This value (12)</span></span><br><span class="line"><span class="comment"> * gives empirically good results and is arguably consistent with the</span></span><br><span class="line"><span class="comment"> * RI's specified default initial capacity of 10: instead of 10, we start</span></span><br><span class="line"><span class="comment"> * with 0 (sans allocation) and jump to 12.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> MIN_CAPACITY_INCREMENT = <span class="number">12</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * This method controls the growth of ArrayList capacities.  It represents</span></span><br><span class="line"><span class="comment"> * a time-space tradeoff: we don't want to grow lists too frequently</span></span><br><span class="line"><span class="comment"> * (which wastes time and fragments storage), but we don't want to waste</span></span><br><span class="line"><span class="comment"> * too much space in unused excess capacity.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">NOTE:</span> This method is inlined into &#123;<span class="doctag">@link</span> #add(Object)&#125; for performance.</span></span><br><span class="line"><span class="comment"> * If you change the method, change it there too!</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">newCapacity</span><span class="params">(<span class="keyword">int</span> currentCapacity)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> increment = (currentCapacity &lt; (MIN_CAPACITY_INCREMENT / <span class="number">2</span>) ?</span><br><span class="line">            MIN_CAPACITY_INCREMENT : currentCapacity &gt;&gt; <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">return</span> currentCapacity + increment;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><a id="more"></a><h2 id="LinkedList"><a href="#LinkedList" class="headerlink" title="LinkedList"></a>LinkedList</h2><h3 id="底层实现-1"><a href="#底层实现-1" class="headerlink" title="底层实现"></a>底层实现</h3><p>LinkedList的底层实现为双向链表。存在一个voidLink节点来连接表头和表尾。在访问某一节点的过程中，如果location小于size / 2，则从表头开始遍历，否则从表尾开始遍历。插入和删除效率高，随机访问效率差。</p><h3 id="线程安全性-1"><a href="#线程安全性-1" class="headerlink" title="线程安全性"></a>线程安全性</h3><p>非线程安全</p><h3 id="扩容机制-1"><a href="#扩容机制-1" class="headerlink" title="扩容机制"></a>扩容机制</h3><p>直接增加元素</p><h2 id="CopyOnWriteArrayList"><a href="#CopyOnWriteArrayList" class="headerlink" title="CopyOnWriteArrayList"></a>CopyOnWriteArrayList</h2><h3 id="底层实现-2"><a href="#底层实现-2" class="headerlink" title="底层实现"></a>底层实现</h3><p>CopyOnWriteArrayList的底层实现为Object[]数组。Add和Remove操作多使用System.arrayCopy()方法</p><h3 id="线程安全性-2"><a href="#线程安全性-2" class="headerlink" title="线程安全性"></a>线程安全性</h3><p>线程安全，通过写时拷贝实现，保证最终一致性。在进行写操作时通过synchronized加锁，先拷贝一个副本在副本中执行操作，最后获取副本的引用。以add方法为例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">boolean</span> <span class="title">add</span><span class="params">(E e)</span> </span>&#123;</span><br><span class="line">    Object[] newElements = <span class="keyword">new</span> Object[elements.length + <span class="number">1</span>];</span><br><span class="line">    System.arraycopy(elements, <span class="number">0</span>, newElements, <span class="number">0</span>, elements.length);</span><br><span class="line">    newElements[elements.length] = e;</span><br><span class="line">    elements = newElements;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>写操作不保证立刻生效，有可能在执行写操作时读到之前的值。</p><h3 id="扩容机制-2"><a href="#扩容机制-2" class="headerlink" title="扩容机制"></a>扩容机制</h3><p>直接增加元素</p><h2 id="Vector"><a href="#Vector" class="headerlink" title="Vector"></a>Vector</h2><h3 id="底层实现-3"><a href="#底层实现-3" class="headerlink" title="底层实现"></a>底层实现</h3><p>Vector的底层实现为Object[]数组。Add和Remove操作多使用System.arrayCopy()方法</p><h3 id="线程安全性-3"><a href="#线程安全性-3" class="headerlink" title="线程安全性"></a>线程安全性</h3><p>线程安全，通过synchronized代码块实现。由于大量操作使用synchronized，性能受到影响。</p><h3 id="扩容机制-3"><a href="#扩容机制-3" class="headerlink" title="扩容机制"></a>扩容机制</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * JIT optimization</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">growByOne</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> adding = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (capacityIncrement &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> ((adding = elementData.length) == <span class="number">0</span>) &#123;</span><br><span class="line">            adding = <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        adding = capacityIncrement;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    E[] newData = newElementArray(elementData.length + adding);</span><br><span class="line">    System.arraycopy(elementData, <span class="number">0</span>, newData, <span class="number">0</span>, elementCount);</span><br><span class="line">    elementData = newData;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="ArrayMap"><a href="#ArrayMap" class="headerlink" title="ArrayMap"></a>ArrayMap</h2><h3 id="底层实现-4"><a href="#底层实现-4" class="headerlink" title="底层实现"></a>底层实现</h3><p>ArrayMap底层实现为两个数组，<code>int[] mHashes</code>和<code>Object[] mArray</code>。其中<code>mHashes</code>存储<code>key.hashCode()</code>，<code>mArray</code>存储key和value。当插入一个键值对时，会分配一个index。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">mHashes[index] = key.hashCode();</span><br><span class="line">index &lt;&lt;= <span class="number">1</span>;</span><br><span class="line">mArray[index] = key;</span><br><span class="line">mArray[index+<span class="number">1</span>] = value;</span><br></pre></td></tr></table></figure><p>查找元素时，得到key的hashCode，使用二分法从<code>mHashes</code>中找到对应的index。然后再到<code>mArray</code>中获取相应的key和value。</p><p>删除操作有多个数组的copy操作，性能差。</p><h3 id="线程安全性-4"><a href="#线程安全性-4" class="headerlink" title="线程安全性"></a>线程安全性</h3><p>非线程安全</p><h3 id="扩容机制-4"><a href="#扩容机制-4" class="headerlink" title="扩容机制"></a>扩容机制</h3><p>通过<code>allocArrays</code>和<code>freeArrays</code>动态分配空间</p><h2 id="HashMap"><a href="#HashMap" class="headerlink" title="HashMap"></a>HashMap</h2><h3 id="底层实现-5"><a href="#底层实现-5" class="headerlink" title="底层实现"></a>底层实现</h3><p>HashMap的底层实现为HashEntry[]数组，每个HashEntry是一个单链表。是哈希表的拉链法实现。通过hashCode和equal方法共同找到一个元素。</p><h3 id="线程安全性-5"><a href="#线程安全性-5" class="headerlink" title="线程安全性"></a>线程安全性</h3><p>非线程安全</p><h3 id="扩容机制-5"><a href="#扩容机制-5" class="headerlink" title="扩容机制"></a>扩容机制</h3><p>首先HashMap存在容量限制</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Min capacity (other than zero) for a HashMap. Must be a power of two</span></span><br><span class="line"><span class="comment"> * greater than 1 (and less than 1 &lt;&lt; 30).</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> MINIMUM_CAPACITY = <span class="number">4</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Max capacity for a HashMap. Must be a power of two &gt;= MINIMUM_CAPACITY.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> MAXIMUM_CAPACITY = <span class="number">1</span> &lt;&lt; <span class="number">30</span>;</span><br></pre></td></tr></table></figure><p>其次存在一个load factor</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * The default load factor. Note that this implementation ignores the</span></span><br><span class="line"><span class="comment"> * load factor, but cannot do away with it entirely because it's</span></span><br><span class="line"><span class="comment"> * mentioned in the API.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;Note that this constant has no impact on the behavior of the program,</span></span><br><span class="line"><span class="comment"> * but it is emitted as part of the serialized form. The load factor of</span></span><br><span class="line"><span class="comment"> * .75 is hardwired into the program, which uses cheap shifts in place of</span></span><br><span class="line"><span class="comment"> * expensive division.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">float</span> DEFAULT_LOAD_FACTOR = .<span class="number">75F</span>;</span><br></pre></td></tr></table></figure><p>以及threshold</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * The table is rehashed when its size exceeds this threshold.</span></span><br><span class="line"><span class="comment"> * The value of this field is generally .75 * capacity, except when</span></span><br><span class="line"><span class="comment"> * the capacity is zero, as described in the EMPTY_TABLE declaration</span></span><br><span class="line"><span class="comment"> * above.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">transient</span> <span class="keyword">int</span> threshold;</span><br></pre></td></tr></table></figure><p>这些成员都可以从构造函数中传入。从注释中可以看出，threshold = loadFactor * capacity，当HashMap容量超过threshold时，会进行<code>doubleCapacity</code>的扩容操作。由于哈希表在容量改变时需要进行Rehash操作，会耗费大量的时间。所以应该尽量避免频繁的扩容操作。</p><h2 id="LinkedHashMap"><a href="#LinkedHashMap" class="headerlink" title="LinkedHashMap"></a>LinkedHashMap</h2><h3 id="底层实现-6"><a href="#底层实现-6" class="headerlink" title="底层实现"></a>底层实现</h3><p>与HashMap类似，不过HashEntry[]数组改为用LinkedEntry为节点的双向链表实现，保存了插入的顺序。性能表现可以参考LinkedList和ArrayList。与HashMap是继承关系。</p><h3 id="线程安全性-6"><a href="#线程安全性-6" class="headerlink" title="线程安全性"></a>线程安全性</h3><p>非线程安全</p><h3 id="扩容机制-6"><a href="#扩容机制-6" class="headerlink" title="扩容机制"></a>扩容机制</h3><p>直接增加元素</p><h2 id="TreeMap"><a href="#TreeMap" class="headerlink" title="TreeMap"></a>TreeMap</h2><h3 id="底层实现-7"><a href="#底层实现-7" class="headerlink" title="底层实现"></a>底层实现</h3><p>TreeMap底层实现为红黑树。元素是有序的，不支持空元素。</p><h3 id="线程安全性-7"><a href="#线程安全性-7" class="headerlink" title="线程安全性"></a>线程安全性</h3><p>非线程安全</p><h3 id="扩容机制-7"><a href="#扩容机制-7" class="headerlink" title="扩容机制"></a>扩容机制</h3><p>直接增加元素</p><h2 id="HashTable"><a href="#HashTable" class="headerlink" title="HashTable"></a>HashTable</h2><h3 id="底层实现-8"><a href="#底层实现-8" class="headerlink" title="底层实现"></a>底层实现</h3><p>HashTable底层实现为HashTableEntry[]数组。不支持空元素。HashTable是遗留类，已经不推荐使用，在不需要线程安全的场景可以使用HashMap，在线程安全的场景可以使用ConcurrentHashMap。</p><h3 id="线程安全性-8"><a href="#线程安全性-8" class="headerlink" title="线程安全性"></a>线程安全性</h3><p>线程安全，通过synchronized代码块实现。由于大量操作使用synchronized，性能受到影响。</p><h3 id="扩容机制-8"><a href="#扩容机制-8" class="headerlink" title="扩容机制"></a>扩容机制</h3><p>扩容机制同HashMap</p><h2 id="ArraySet"><a href="#ArraySet" class="headerlink" title="ArraySet"></a>ArraySet</h2><h3 id="底层实现-9"><a href="#底层实现-9" class="headerlink" title="底层实现"></a>底层实现</h3><p>同ArrayMap，在插入操作时不允许重复元素。</p><h3 id="线程安全性-9"><a href="#线程安全性-9" class="headerlink" title="线程安全性"></a>线程安全性</h3><p>非线程安全</p><h3 id="扩容机制-9"><a href="#扩容机制-9" class="headerlink" title="扩容机制"></a>扩容机制</h3><p>同ArrayMap</p><h2 id="HashSet"><a href="#HashSet" class="headerlink" title="HashSet"></a>HashSet</h2><h3 id="底层实现-10"><a href="#底层实现-10" class="headerlink" title="底层实现"></a>底层实现</h3><p>HashSet底层实现为<code>HashMap&lt;E, HashSet&lt;E&gt;&gt;</code>，十分巧妙，增删改查等基础操作只需要调用HashMap中的相应方法即可。</p><h3 id="线程安全性-10"><a href="#线程安全性-10" class="headerlink" title="线程安全性"></a>线程安全性</h3><p>非线程安全</p><h3 id="扩容机制-10"><a href="#扩容机制-10" class="headerlink" title="扩容机制"></a>扩容机制</h3><p>同HashMap</p><h2 id="TreeSet"><a href="#TreeSet" class="headerlink" title="TreeSet"></a>TreeSet</h2><h3 id="底层实现-11"><a href="#底层实现-11" class="headerlink" title="底层实现"></a>底层实现</h3><p>TreeSet底层实现为NavigableMap&lt;E, Object&gt;。思想与HashSet类似。</p><h3 id="线程安全性-11"><a href="#线程安全性-11" class="headerlink" title="线程安全性"></a>线程安全性</h3><p>非线程安全</p><h3 id="扩容机制-11"><a href="#扩容机制-11" class="headerlink" title="扩容机制"></a>扩容机制</h3><p>直接增加元素</p><h2 id="CopyOnWriteArraySet"><a href="#CopyOnWriteArraySet" class="headerlink" title="CopyOnWriteArraySet"></a>CopyOnWriteArraySet</h2><h3 id="底层实现-12"><a href="#底层实现-12" class="headerlink" title="底层实现"></a>底层实现</h3><p>CopyOnWriteArraySet的底层实现为CopyOnWriteArrayList。增删改查等基础操作只需要调用CopyOnWriteArrayList中的相应方法即可。注意add操作调用的是<code>addAllAbsent</code>防止元素重复。</p><h3 id="线程安全性-12"><a href="#线程安全性-12" class="headerlink" title="线程安全性"></a>线程安全性</h3><p>线程安全，原理同CopyOnWriteArrayList</p><h3 id="扩容机制-12"><a href="#扩容机制-12" class="headerlink" title="扩容机制"></a>扩容机制</h3><p>同CopyOnWriteArrayList</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;ArrayList&quot;&gt;&lt;a href=&quot;#ArrayList&quot; class=&quot;headerlink&quot; title=&quot;ArrayList&quot;&gt;&lt;/a&gt;ArrayList&lt;/h2&gt;&lt;h3 id=&quot;底层实现&quot;&gt;&lt;a href=&quot;#底层实现&quot; class=&quot;headerlink&quot; title=&quot;底层实现&quot;&gt;&lt;/a&gt;底层实现&lt;/h3&gt;&lt;p&gt;ArrayList的底层实现为Object[]数组。Add和Remove操作多使用System.arrayCopy()方法。随机访问效率高，插入和删除效率差。&lt;/p&gt;
&lt;h3 id=&quot;线程安全性&quot;&gt;&lt;a href=&quot;#线程安全性&quot; class=&quot;headerlink&quot; title=&quot;线程安全性&quot;&gt;&lt;/a&gt;线程安全性&lt;/h3&gt;&lt;p&gt;非线程安全&lt;/p&gt;
&lt;h3 id=&quot;扩容机制&quot;&gt;&lt;a href=&quot;#扩容机制&quot; class=&quot;headerlink&quot; title=&quot;扩容机制&quot;&gt;&lt;/a&gt;扩容机制&lt;/h3&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/**&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt; * The minimum amount by which the capacity of an ArrayList will increase.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt; * This tuning parameter controls a time-space tradeoff. This value (12)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt; * gives empirically good results and is arguably consistent with the&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt; * RI&#39;s specified default initial capacity of 10: instead of 10, we start&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt; * with 0 (sans allocation) and jump to 12.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt; */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; MIN_CAPACITY_INCREMENT = &lt;span class=&quot;number&quot;&gt;12&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/**&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt; * This method controls the growth of ArrayList capacities.  It represents&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt; * a time-space tradeoff: we don&#39;t want to grow lists too frequently&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt; * (which wastes time and fragments storage), but we don&#39;t want to waste&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt; * too much space in unused excess capacity.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt; *&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt; * &lt;span class=&quot;doctag&quot;&gt;NOTE:&lt;/span&gt; This method is inlined into &amp;#123;&lt;span class=&quot;doctag&quot;&gt;@link&lt;/span&gt; #add(Object)&amp;#125; for performance.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt; * If you change the method, change it there too!&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt; */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;newCapacity&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; currentCapacity)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; increment = (currentCapacity &amp;lt; (MIN_CAPACITY_INCREMENT / &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;) ?&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            MIN_CAPACITY_INCREMENT : currentCapacity &amp;gt;&amp;gt; &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; currentCapacity + increment;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="编程语言" scheme="http://yoursite.com/categories/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"/>
    
    
      <category term="Java" scheme="http://yoursite.com/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Activity各种情形的生命周期</title>
    <link href="http://yoursite.com/2017/03/31/Activity%E5%90%84%E7%A7%8D%E6%83%85%E5%BD%A2%E7%9A%84%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/"/>
    <id>http://yoursite.com/2017/03/31/Activity各种情形的生命周期/</id>
    <published>2017-03-30T16:26:28.000Z</published>
    <updated>2018-05-16T09:01:02.368Z</updated>
    
    <content type="html"><![CDATA[<p>Android组件中，Activity的生命周期是最复杂的。首先看一下完整的Activity生命周期图。</p><p><img src="/images/activity_lifecycle.png" alt=""></p><p>这张图粗略地表示了一个Activity从启动到销毁完整的生命周期。但是这篇文章想要探究Activity生命周期的更多细节。接下来的内容要看看Activity在一些特殊的场景下会有怎样的表现，生命周期中各个回调的执行顺序。这些会通过一个Demo的Log来展现。Demo的源码可以在<a href="https://github.com/ts25504/learn-android/tree/master/Activity" target="_blank" rel="noopener">这里</a>找到。<br><a id="more"></a></p><h2 id="场景1"><a href="#场景1" class="headerlink" title="场景1"></a>场景1</h2><p>首先是Activity正常启动然后销毁的流程。</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 启动MainActivity后按下HOME键</span></span><br><span class="line"><span class="number">2534</span>-<span class="number">2534</span>/com<span class="selector-class">.cm</span><span class="selector-class">.ts</span><span class="selector-class">.activity</span> D/MainActivity[DEBUG]: onCreate</span><br><span class="line"><span class="number">2534</span>-<span class="number">2534</span>/com<span class="selector-class">.cm</span><span class="selector-class">.ts</span><span class="selector-class">.activity</span> D/MainActivity[DEBUG]: onStart</span><br><span class="line"><span class="number">2534</span>-<span class="number">2534</span>/com<span class="selector-class">.cm</span><span class="selector-class">.ts</span><span class="selector-class">.activity</span> D/MainActivity[DEBUG]: onResume</span><br><span class="line"><span class="number">2534</span>-<span class="number">2534</span>/com<span class="selector-class">.cm</span><span class="selector-class">.ts</span><span class="selector-class">.activity</span> D/MainActivity[DEBUG]: onPause</span><br><span class="line"><span class="number">2534</span>-<span class="number">2534</span>/com<span class="selector-class">.cm</span><span class="selector-class">.ts</span><span class="selector-class">.activity</span> D/MainActivity[DEBUG]: onSaveInstanceState</span><br><span class="line"><span class="number">2534</span>-<span class="number">2534</span>/com<span class="selector-class">.cm</span><span class="selector-class">.ts</span><span class="selector-class">.activity</span> D/MainActivity[DEBUG]: onStop</span><br><span class="line"><span class="comment">// 接下来再次启动MainActivity</span></span><br><span class="line"><span class="number">2534</span>-<span class="number">2534</span>/com<span class="selector-class">.cm</span><span class="selector-class">.ts</span><span class="selector-class">.activity</span> D/MainActivity[DEBUG]: onRestart</span><br><span class="line"><span class="number">2534</span>-<span class="number">2534</span>/com<span class="selector-class">.cm</span><span class="selector-class">.ts</span><span class="selector-class">.activity</span> D/MainActivity[DEBUG]: onStart</span><br><span class="line"><span class="number">2534</span>-<span class="number">2534</span>/com<span class="selector-class">.cm</span><span class="selector-class">.ts</span><span class="selector-class">.activity</span> D/MainActivity[DEBUG]: onResume</span><br><span class="line"><span class="comment">// 然后按Back键销毁</span></span><br><span class="line"><span class="number">2534</span>-<span class="number">2534</span>/com<span class="selector-class">.cm</span><span class="selector-class">.ts</span><span class="selector-class">.activity</span> D/MainActivity[DEBUG]: onBackPressed</span><br><span class="line"><span class="number">2534</span>-<span class="number">2534</span>/com<span class="selector-class">.cm</span><span class="selector-class">.ts</span><span class="selector-class">.activity</span> D/MainActivity[DEBUG]: onPause</span><br><span class="line"><span class="number">2534</span>-<span class="number">2534</span>/com<span class="selector-class">.cm</span><span class="selector-class">.ts</span><span class="selector-class">.activity</span> D/MainActivity[DEBUG]: onStop</span><br><span class="line"><span class="number">2534</span>-<span class="number">2534</span>/com<span class="selector-class">.cm</span><span class="selector-class">.ts</span><span class="selector-class">.activity</span> D/MainActivity[DEBUG]: onDestroy</span><br></pre></td></tr></table></figure><h2 id="场景2"><a href="#场景2" class="headerlink" title="场景2"></a>场景2</h2><p>启动Activity后翻转屏幕，未做任何处理的情况下。</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">2534</span>-<span class="number">2534</span>/com<span class="selector-class">.cm</span><span class="selector-class">.ts</span><span class="selector-class">.activity</span> D/MainActivity[DEBUG]: onCreate</span><br><span class="line"><span class="number">2534</span>-<span class="number">2534</span>/com<span class="selector-class">.cm</span><span class="selector-class">.ts</span><span class="selector-class">.activity</span> D/MainActivity[DEBUG]: onStart</span><br><span class="line"><span class="number">2534</span>-<span class="number">2534</span>/com<span class="selector-class">.cm</span><span class="selector-class">.ts</span><span class="selector-class">.activity</span> D/MainActivity[DEBUG]: onResume</span><br><span class="line"><span class="comment">// 此时翻转屏幕</span></span><br><span class="line"><span class="number">2534</span>-<span class="number">2534</span>/com<span class="selector-class">.cm</span><span class="selector-class">.ts</span><span class="selector-class">.activity</span> D/MainActivity[DEBUG]: onPause</span><br><span class="line"><span class="number">2534</span>-<span class="number">2534</span>/com<span class="selector-class">.cm</span><span class="selector-class">.ts</span><span class="selector-class">.activity</span> D/MainActivity[DEBUG]: onSaveInstanceState</span><br><span class="line"><span class="number">2534</span>-<span class="number">2534</span>/com<span class="selector-class">.cm</span><span class="selector-class">.ts</span><span class="selector-class">.activity</span> D/MainActivity[DEBUG]: onStop</span><br><span class="line"><span class="number">2534</span>-<span class="number">2534</span>/com<span class="selector-class">.cm</span><span class="selector-class">.ts</span><span class="selector-class">.activity</span> D/MainActivity[DEBUG]: onDestroy</span><br><span class="line"><span class="number">2534</span>-<span class="number">2534</span>/com<span class="selector-class">.cm</span><span class="selector-class">.ts</span><span class="selector-class">.activity</span> D/MainActivity[DEBUG]: onCreate</span><br><span class="line"><span class="number">2534</span>-<span class="number">2534</span>/com<span class="selector-class">.cm</span><span class="selector-class">.ts</span><span class="selector-class">.activity</span> D/MainActivity[DEBUG]: onStart</span><br><span class="line"><span class="number">2534</span>-<span class="number">2534</span>/com<span class="selector-class">.cm</span><span class="selector-class">.ts</span><span class="selector-class">.activity</span> D/MainActivity[DEBUG]: onRestoreInstanceState</span><br><span class="line"><span class="number">2534</span>-<span class="number">2534</span>/com<span class="selector-class">.cm</span><span class="selector-class">.ts</span><span class="selector-class">.activity</span> D/MainActivity[DEBUG]: onResume</span><br><span class="line"><span class="comment">// 此时销毁Activity</span></span><br><span class="line"><span class="number">2534</span>-<span class="number">2534</span>/com<span class="selector-class">.cm</span><span class="selector-class">.ts</span><span class="selector-class">.activity</span> D/MainActivity[DEBUG]: onBackPressed</span><br><span class="line"><span class="number">2534</span>-<span class="number">2534</span>/com<span class="selector-class">.cm</span><span class="selector-class">.ts</span><span class="selector-class">.activity</span> D/MainActivity[DEBUG]: onPause</span><br><span class="line"><span class="number">2534</span>-<span class="number">2534</span>/com<span class="selector-class">.cm</span><span class="selector-class">.ts</span><span class="selector-class">.activity</span> D/MainActivity[DEBUG]: onStop</span><br><span class="line"><span class="number">2534</span>-<span class="number">2534</span>/com<span class="selector-class">.cm</span><span class="selector-class">.ts</span><span class="selector-class">.activity</span> D/MainActivity[DEBUG]: onDestroy</span><br></pre></td></tr></table></figure><h2 id="场景3"><a href="#场景3" class="headerlink" title="场景3"></a>场景3</h2><p>启动Activity后启动另一个Activity，然后返回并销毁。</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">2534</span>-<span class="number">2534</span>/com<span class="selector-class">.cm</span><span class="selector-class">.ts</span><span class="selector-class">.activity</span> D/MainActivity[DEBUG]: onCreate</span><br><span class="line"><span class="number">2534</span>-<span class="number">2534</span>/com<span class="selector-class">.cm</span><span class="selector-class">.ts</span><span class="selector-class">.activity</span> D/MainActivity[DEBUG]: onStart</span><br><span class="line"><span class="number">2534</span>-<span class="number">2534</span>/com<span class="selector-class">.cm</span><span class="selector-class">.ts</span><span class="selector-class">.activity</span> D/MainActivity[DEBUG]: onResume</span><br><span class="line"><span class="comment">// 此时启动新Activity</span></span><br><span class="line"><span class="number">2534</span>-<span class="number">2534</span>/com<span class="selector-class">.cm</span><span class="selector-class">.ts</span><span class="selector-class">.activity</span> D/MainActivity[DEBUG]: onPause</span><br><span class="line"><span class="number">2534</span>-<span class="number">2534</span>/com<span class="selector-class">.cm</span><span class="selector-class">.ts</span><span class="selector-class">.activity</span> D/StandardActivity[DEBUG]: onCreate</span><br><span class="line"><span class="number">2534</span>-<span class="number">2534</span>/com<span class="selector-class">.cm</span><span class="selector-class">.ts</span><span class="selector-class">.activity</span> D/StandardActivity[DEBUG]: onStart</span><br><span class="line"><span class="number">2534</span>-<span class="number">2534</span>/com<span class="selector-class">.cm</span><span class="selector-class">.ts</span><span class="selector-class">.activity</span> D/StandardActivity[DEBUG]: onResume</span><br><span class="line"><span class="number">2534</span>-<span class="number">2534</span>/com<span class="selector-class">.cm</span><span class="selector-class">.ts</span><span class="selector-class">.activity</span> D/MainActivity[DEBUG]: onSaveInstanceState</span><br><span class="line"><span class="number">2534</span>-<span class="number">2534</span>/com<span class="selector-class">.cm</span><span class="selector-class">.ts</span><span class="selector-class">.activity</span> D/MainActivity[DEBUG]: onStop</span><br><span class="line"><span class="comment">// 此时销毁新Activity</span></span><br><span class="line"><span class="number">534</span>-<span class="number">2534</span>/com<span class="selector-class">.cm</span><span class="selector-class">.ts</span><span class="selector-class">.activity</span> D/StandardActivity[DEBUG]: onBackPressed</span><br><span class="line"><span class="number">2534</span>-<span class="number">2534</span>/com<span class="selector-class">.cm</span><span class="selector-class">.ts</span><span class="selector-class">.activity</span> D/StandardActivity[DEBUG]: onPause</span><br><span class="line"><span class="number">2534</span>-<span class="number">2534</span>/com<span class="selector-class">.cm</span><span class="selector-class">.ts</span><span class="selector-class">.activity</span> D/MainActivity[DEBUG]: onRestart</span><br><span class="line"><span class="number">2534</span>-<span class="number">2534</span>/com<span class="selector-class">.cm</span><span class="selector-class">.ts</span><span class="selector-class">.activity</span> D/MainActivity[DEBUG]: onStart</span><br><span class="line"><span class="number">2534</span>-<span class="number">2534</span>/com<span class="selector-class">.cm</span><span class="selector-class">.ts</span><span class="selector-class">.activity</span> D/MainActivity[DEBUG]: onResume</span><br><span class="line"><span class="number">2534</span>-<span class="number">2534</span>/com<span class="selector-class">.cm</span><span class="selector-class">.ts</span><span class="selector-class">.activity</span> D/StandardActivity[DEBUG]: onStop</span><br><span class="line"><span class="number">2534</span>-<span class="number">2534</span>/com<span class="selector-class">.cm</span><span class="selector-class">.ts</span><span class="selector-class">.activity</span> D/StandardActivity[DEBUG]: onDestroy</span><br><span class="line"><span class="comment">// 此时销毁Activity</span></span><br><span class="line"><span class="number">2534</span>-<span class="number">2534</span>/com<span class="selector-class">.cm</span><span class="selector-class">.ts</span><span class="selector-class">.activity</span> D/MainActivity[DEBUG]: onBackPressed</span><br><span class="line"><span class="number">2534</span>-<span class="number">2534</span>/com<span class="selector-class">.cm</span><span class="selector-class">.ts</span><span class="selector-class">.activity</span> D/MainActivity[DEBUG]: onPause</span><br><span class="line"><span class="number">2534</span>-<span class="number">2534</span>/com<span class="selector-class">.cm</span><span class="selector-class">.ts</span><span class="selector-class">.activity</span> D/MainActivity[DEBUG]: onStop</span><br><span class="line"><span class="number">2534</span>-<span class="number">2534</span>/com<span class="selector-class">.cm</span><span class="selector-class">.ts</span><span class="selector-class">.activity</span> D/MainActivity[DEBUG]: onDestroy</span><br></pre></td></tr></table></figure><h2 id="场景4"><a href="#场景4" class="headerlink" title="场景4"></a>场景4</h2><p>singletask模式或singleinstance模式的Activity重新启动和singletop模式在task顶部重新启动。</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">2534</span>-<span class="number">2534</span>/com<span class="selector-class">.cm</span><span class="selector-class">.ts</span><span class="selector-class">.activity</span> D/SingleTaskActivity[DEBUG]: onCreate</span><br><span class="line"><span class="number">2534</span>-<span class="number">2534</span>/com<span class="selector-class">.cm</span><span class="selector-class">.ts</span><span class="selector-class">.activity</span> D/SingleTaskActivity[DEBUG]: onStart</span><br><span class="line"><span class="number">2534</span>-<span class="number">2534</span>/com<span class="selector-class">.cm</span><span class="selector-class">.ts</span><span class="selector-class">.activity</span> D/SingleTaskActivity[DEBUG]: onResume</span><br><span class="line"><span class="comment">// 此时重新启动自己</span></span><br><span class="line"><span class="number">2534</span>-<span class="number">2534</span>/com<span class="selector-class">.cm</span><span class="selector-class">.ts</span><span class="selector-class">.activity</span> D/SingleTaskActivity[DEBUG]: onPause</span><br><span class="line"><span class="number">2534</span>-<span class="number">2534</span>/com<span class="selector-class">.cm</span><span class="selector-class">.ts</span><span class="selector-class">.activity</span> D/SingleTaskActivity[DEBUG]: onNewIntent</span><br><span class="line"><span class="number">2534</span>-<span class="number">2534</span>/com<span class="selector-class">.cm</span><span class="selector-class">.ts</span><span class="selector-class">.activity</span> D/SingleTaskActivity[DEBUG]: onResume</span><br><span class="line"><span class="comment">// 销毁</span></span><br><span class="line"><span class="number">2534</span>-<span class="number">2534</span>/com<span class="selector-class">.cm</span><span class="selector-class">.ts</span><span class="selector-class">.activity</span> D/SingleTaskActivity[DEBUG]: onBackPressed</span><br><span class="line"><span class="number">2534</span>-<span class="number">2534</span>/com<span class="selector-class">.cm</span><span class="selector-class">.ts</span><span class="selector-class">.activity</span> D/SingleTaskActivity[DEBUG]: onPause</span><br><span class="line"><span class="number">2534</span>-<span class="number">2534</span>/com<span class="selector-class">.cm</span><span class="selector-class">.ts</span><span class="selector-class">.activity</span> D/SingleTaskActivity[DEBUG]: onStop</span><br><span class="line"><span class="number">2534</span>-<span class="number">2534</span>/com<span class="selector-class">.cm</span><span class="selector-class">.ts</span><span class="selector-class">.activity</span> D/SingleTaskActivity[DEBUG]: onDestroy</span><br></pre></td></tr></table></figure><h2 id="场景5"><a href="#场景5" class="headerlink" title="场景5"></a>场景5</h2><p>singletask模式或singleinstance模式的Activity启动新的Activity，新的Activity再启动老的Activity。</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">2534</span>-<span class="number">2534</span>/com<span class="selector-class">.cm</span><span class="selector-class">.ts</span><span class="selector-class">.activity</span> D/SingleInstanceActivity[DEBUG]: onCreate</span><br><span class="line"><span class="number">2534</span>-<span class="number">2534</span>/com<span class="selector-class">.cm</span><span class="selector-class">.ts</span><span class="selector-class">.activity</span> D/SingleInstanceActivity[DEBUG]: onStart</span><br><span class="line"><span class="number">2534</span>-<span class="number">2534</span>/com<span class="selector-class">.cm</span><span class="selector-class">.ts</span><span class="selector-class">.activity</span> D/SingleInstanceActivity[DEBUG]: onResume</span><br><span class="line"><span class="comment">// 此时启动standard模式的Activity</span></span><br><span class="line"><span class="number">2534</span>-<span class="number">2534</span>/com<span class="selector-class">.cm</span><span class="selector-class">.ts</span><span class="selector-class">.activity</span> D/SingleInstanceActivity[DEBUG]: onPause</span><br><span class="line"><span class="number">2534</span>-<span class="number">2534</span>/com<span class="selector-class">.cm</span><span class="selector-class">.ts</span><span class="selector-class">.activity</span> D/StandardActivity[DEBUG]: onCreate</span><br><span class="line"><span class="number">2534</span>-<span class="number">2534</span>/com<span class="selector-class">.cm</span><span class="selector-class">.ts</span><span class="selector-class">.activity</span> D/StandardActivity[DEBUG]: onStart</span><br><span class="line"><span class="number">2534</span>-<span class="number">2534</span>/com<span class="selector-class">.cm</span><span class="selector-class">.ts</span><span class="selector-class">.activity</span> D/StandardActivity[DEBUG]: onResume</span><br><span class="line"><span class="number">2534</span>-<span class="number">2534</span>/com<span class="selector-class">.cm</span><span class="selector-class">.ts</span><span class="selector-class">.activity</span> D/SingleInstanceActivity[DEBUG]: onSaveInstanceState</span><br><span class="line"><span class="number">2534</span>-<span class="number">2534</span>/com<span class="selector-class">.cm</span><span class="selector-class">.ts</span><span class="selector-class">.activity</span> D/SingleInstanceActivity[DEBUG]: onStop</span><br><span class="line"><span class="comment">// 此时StandardActivity再启动SingleInstanceActivity</span></span><br><span class="line"><span class="number">2534</span>-<span class="number">2534</span>/com<span class="selector-class">.cm</span><span class="selector-class">.ts</span><span class="selector-class">.activity</span> D/StandardActivity[DEBUG]: onPause</span><br><span class="line"><span class="number">2534</span>-<span class="number">2534</span>/com<span class="selector-class">.cm</span><span class="selector-class">.ts</span><span class="selector-class">.activity</span> D/SingleInstanceActivity[DEBUG]: onNewIntent</span><br><span class="line"><span class="number">2534</span>-<span class="number">2534</span>/com<span class="selector-class">.cm</span><span class="selector-class">.ts</span><span class="selector-class">.activity</span> D/SingleInstanceActivity[DEBUG]: onRestart</span><br><span class="line"><span class="number">2534</span>-<span class="number">2534</span>/com<span class="selector-class">.cm</span><span class="selector-class">.ts</span><span class="selector-class">.activity</span> D/SingleInstanceActivity[DEBUG]: onStart</span><br><span class="line"><span class="number">2534</span>-<span class="number">2534</span>/com<span class="selector-class">.cm</span><span class="selector-class">.ts</span><span class="selector-class">.activity</span> D/SingleInstanceActivity[DEBUG]: onResume</span><br><span class="line"><span class="number">2534</span>-<span class="number">2534</span>/com<span class="selector-class">.cm</span><span class="selector-class">.ts</span><span class="selector-class">.activity</span> D/StandardActivity[DEBUG]: onSaveInstanceState</span><br><span class="line"><span class="number">2534</span>-<span class="number">2534</span>/com<span class="selector-class">.cm</span><span class="selector-class">.ts</span><span class="selector-class">.activity</span> D/StandardActivity[DEBUG]: onStop</span><br><span class="line"><span class="comment">// 销毁SingleInstanceActivity</span></span><br><span class="line"><span class="number">2534</span>-<span class="number">2534</span>/com<span class="selector-class">.cm</span><span class="selector-class">.ts</span><span class="selector-class">.activity</span> D/SingleInstanceActivity[DEBUG]: onBackPressed</span><br><span class="line"><span class="number">2534</span>-<span class="number">2534</span>/com<span class="selector-class">.cm</span><span class="selector-class">.ts</span><span class="selector-class">.activity</span> D/SingleInstanceActivity[DEBUG]: onPause</span><br><span class="line"><span class="number">2534</span>-<span class="number">2534</span>/com<span class="selector-class">.cm</span><span class="selector-class">.ts</span><span class="selector-class">.activity</span> D/StandardActivity[DEBUG]: onRestart</span><br><span class="line"><span class="number">2534</span>-<span class="number">2534</span>/com<span class="selector-class">.cm</span><span class="selector-class">.ts</span><span class="selector-class">.activity</span> D/StandardActivity[DEBUG]: onStart</span><br><span class="line"><span class="number">2534</span>-<span class="number">2534</span>/com<span class="selector-class">.cm</span><span class="selector-class">.ts</span><span class="selector-class">.activity</span> D/StandardActivity[DEBUG]: onResume</span><br><span class="line"><span class="number">2534</span>-<span class="number">2534</span>/com<span class="selector-class">.cm</span><span class="selector-class">.ts</span><span class="selector-class">.activity</span> D/SingleInstanceActivity[DEBUG]: onStop</span><br><span class="line"><span class="number">2534</span>-<span class="number">2534</span>/com<span class="selector-class">.cm</span><span class="selector-class">.ts</span><span class="selector-class">.activity</span> D/SingleInstanceActivity[DEBUG]: onDestroy</span><br><span class="line"><span class="comment">// 销毁StandardActivity</span></span><br><span class="line"><span class="number">2534</span>-<span class="number">2534</span>/com<span class="selector-class">.cm</span><span class="selector-class">.ts</span><span class="selector-class">.activity</span> D/StandardActivity[DEBUG]: onBackPressed</span><br><span class="line"><span class="number">2534</span>-<span class="number">2534</span>/com<span class="selector-class">.cm</span><span class="selector-class">.ts</span><span class="selector-class">.activity</span> D/StandardActivity[DEBUG]: onPause</span><br><span class="line"><span class="number">2534</span>-<span class="number">2534</span>/com<span class="selector-class">.cm</span><span class="selector-class">.ts</span><span class="selector-class">.activity</span> D/StandardActivity[DEBUG]: onStop</span><br><span class="line"><span class="number">2534</span>-<span class="number">2534</span>/com<span class="selector-class">.cm</span><span class="selector-class">.ts</span><span class="selector-class">.activity</span> D/StandardActivity[DEBUG]: onDestroy</span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>经过这个实验搞清楚了一些比较容易忽略的细节</p><ol><li><code>onSaveInstanceState</code>在<code>onPause</code>和<code>onStop</code>之间执行，<code>onRestoreInstanceState</code>在<code>onStart</code>和<code>onResume</code>之间执行。</li><li>Activity A在启动Activity B时，流程是<code>A.onPause</code>-&gt;<code>B.onCreate</code>-&gt;<code>B.onStart</code>-&gt;<code>B.onResume</code>-&gt;<code>A.onStop</code>。返回时<code>A.onRestart</code>在<code>B.onPause</code>和<code>A.onStart</code>之间执行。</li><li>在一些具有特殊启动模式的Activity重新启动自己时。流程是<code>onPause</code>-&gt;<code>onNewIntent</code>-&gt;<code>onResume</code>。</li><li>其他Activity A重新启动具有特殊启动模式的Activity B时。流程是<code>A.onPause</code>-&gt;<code>B.onNewIntent</code>-&gt;<code>B.onRestart</code>-&gt;<code>B.onStart</code>-&gt;<code>B.onResume</code>-&gt;<code>A.onStop</code>。</li><li>还有两个比较不常见的方法<code>onPostCreate</code>和<code>onPostResume</code>分别在<code>onCreate</code>和<code>onResume</code>执行完毕后回调，是成对出现的。流程是<code>onCreate</code>-&gt;<code>onStart</code>-&gt;<code>onPostCreate</code>-&gt;<code>onResume</code>-&gt;<code>onPostResume</code>。</li></ol><h2 id="关于启动模式的一个细节"><a href="#关于启动模式的一个细节" class="headerlink" title="关于启动模式的一个细节"></a>关于启动模式的一个细节</h2><p><code>singletask</code>模式启动不一定会新开一个task。重新启动时只会清理在其上方的Activity，它更像是用<code>FLAG_ACTIVITY_CLEAR_TOP</code>启动的效果。<br>在指定<code>taskaffinity</code>后，会兼具<code>FLAG_ACTIVITY_NEW_TASK</code>的功能。<br>一个<code>launchMode</code>为<code>standard</code>类型的Activity在使用<code>FLAG_ACTIVITY_CLEAR_TOP</code>启动时，会销毁自己及自己上方的Activity再创建自己，如果想要保持不销毁并调用onNewIntent方法，需要与<code>FLAG_ACTIVITY_SINGLE_TOP</code>一起使用，效果与指定<code>launchMode</code>为<code>singleTask</code>相同。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Android组件中，Activity的生命周期是最复杂的。首先看一下完整的Activity生命周期图。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/activity_lifecycle.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;这张图粗略地表示了一个Activity从启动到销毁完整的生命周期。但是这篇文章想要探究Activity生命周期的更多细节。接下来的内容要看看Activity在一些特殊的场景下会有怎样的表现，生命周期中各个回调的执行顺序。这些会通过一个Demo的Log来展现。Demo的源码可以在&lt;a href=&quot;https://github.com/ts25504/learn-android/tree/master/Activity&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;这里&lt;/a&gt;找到。&lt;br&gt;
    
    </summary>
    
      <category term="Android开发" scheme="http://yoursite.com/categories/Android%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="Android四大组件" scheme="http://yoursite.com/tags/Android%E5%9B%9B%E5%A4%A7%E7%BB%84%E4%BB%B6/"/>
    
  </entry>
  
  <entry>
    <title>使用NotificationListenerService监控通知栏</title>
    <link href="http://yoursite.com/2017/03/28/%E4%BD%BF%E7%94%A8NotificationListenerService%E7%9B%91%E6%8E%A7%E9%80%9A%E7%9F%A5%E6%A0%8F/"/>
    <id>http://yoursite.com/2017/03/28/使用NotificationListenerService监控通知栏/</id>
    <published>2017-03-28T14:24:15.000Z</published>
    <updated>2018-05-16T09:01:02.368Z</updated>
    
    <content type="html"><![CDATA[<h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>NotificationListenerService是Android API Level18新增加的一个服务，当系统通知栏有通知弹出，移除以及位置改变时，会调用这个服务相关的回调方法。因此，我们可以利用这个服务来监控系统通知栏的行为。</p><p>如何在App中注册NotificationListenerService，方法很简单，首先在AndroidManifest.xml中添加一个这样的服务：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">service</span> <span class="attr">android:name</span>=<span class="string">".NotificationListener"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">android:label</span>=<span class="string">"@string/service_name"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">android:permission</span>=<span class="string">"android.permission.BIND_NOTIFICATION_LISTENER_SERVICE"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">intent-filter</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">action</span> <span class="attr">android:name</span>=<span class="string">"android.service.notification.NotificationListenerService"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">intent-filter</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">service</span>&gt;</span></span><br></pre></td></tr></table></figure><p>注意的是服务需要申请<code>BIND_NOTIFICATION_LISTENER_SERVICE</code>权限也就是所谓的通知读取权限，并且在<code>intent-filter</code>中加上<code>SERVICE_INTERFACE</code>这个Action。然后创建一个名为<code>@stirng/service_name</code>的服务继承NotificationListenerService。这样在App启动后并且通知读取权限已开启的情况下，我们的NotificationListenerService就可以监控通知栏事件了。</p><p>还有一个注意的地方在文档里面也说得很清楚了，除了<code>requestRebind(ComponentName)</code>以外，不应该在<code>onListenerConnected()</code>方法回调之前做任何操作。<br><a id="more"></a></p><h2 id="启动流程"><a href="#启动流程" class="headerlink" title="启动流程"></a>启动流程</h2><p>首先，NotificationListenerService是由NotificationManagerService启动的。在用户开机后，Zygote进程fork出SystemService进程，NotificationManagerService在SystemService进程中初始化。<br>在API Level 23中，NotificationManagerService的<code>mListeners</code>成员通过调用<br><code>rebindServices()</code> -&gt; <code>registerService(final ComponentName name, final int userid)</code><br>完成bind NotificationListenerService。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// registerService(final ComponentName name, final int userid)中bind NotificationListenerService的源码</span></span><br><span class="line">...</span><br><span class="line"><span class="keyword">if</span> (!mContext.bindServiceAsUser(intent,</span><br><span class="line">        <span class="keyword">new</span> ServiceConnection() &#123;</span><br><span class="line">            IInterface mService;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onServiceConnected</span><span class="params">(ComponentName name, IBinder binder)</span> </span>&#123;</span><br><span class="line">                <span class="keyword">boolean</span> added = <span class="keyword">false</span>;</span><br><span class="line">                ManagedServiceInfo info = <span class="keyword">null</span>;</span><br><span class="line">                <span class="keyword">synchronized</span> (mMutex) &#123;</span><br><span class="line">                    mServicesBinding.remove(servicesBindingTag);</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        mService = asInterface(binder);</span><br><span class="line">                        info = newServiceInfo(mService, name,</span><br><span class="line">                                userid, <span class="keyword">false</span> <span class="comment">/*isSystem*/</span>, <span class="keyword">this</span>, targetSdkVersion);</span><br><span class="line">                        binder.linkToDeath(info, <span class="number">0</span>);</span><br><span class="line">                        added = mServices.add(info);</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (RemoteException e) &#123;</span><br><span class="line">                        <span class="comment">// already dead</span></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (added) &#123;</span><br><span class="line">                    onServiceAdded(info);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onServiceDisconnected</span><span class="params">(ComponentName name)</span> </span>&#123;</span><br><span class="line">                Slog.v(TAG, getCaption() + <span class="string">" connection lost: "</span> + name);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        Context.BIND_AUTO_CREATE | Context.BIND_FOREGROUND_SERVICE,</span><br><span class="line">        <span class="keyword">new</span> UserHandle(userid)))</span><br><span class="line">&#123;</span><br><span class="line">    mServicesBinding.remove(servicesBindingTag);</span><br><span class="line">    Slog.w(TAG, <span class="string">"Unable to bind "</span> + getCaption() + <span class="string">" service: "</span> + intent);</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>在<code>onServiceConnected(ComponentName name, IBinder binder)</code>中，bind成功后会回调<code>onServiceAdded(ManagedServiceInfo info)</code>方法，这里的<code>info</code>是对<code>binder</code>的简单封装。在这里面又会回调<code>listener.onListenerConnected(update)</code>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onServiceAdded</span><span class="params">(ManagedServiceInfo info)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> INotificationListener listener = (INotificationListener) info.service;</span><br><span class="line">    <span class="keyword">final</span> NotificationRankingUpdate update;</span><br><span class="line">    <span class="keyword">synchronized</span> (mNotificationList) &#123;</span><br><span class="line">        updateNotificationGroupsDesiredLocked();</span><br><span class="line">        update = makeRankingUpdateLocked(info);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        listener.onListenerConnected(update);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (RemoteException e) &#123;</span><br><span class="line">        <span class="comment">// we tried</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>listener是一个INotificationListener接口的对象。这个接口会通过IPC传递给NotificationManagerService。在NotificationListenerService的<code>onBind</code>方法中</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> IBinder <span class="title">onBind</span><span class="params">(Intent intent)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (mWrapper == <span class="keyword">null</span>) &#123;</span><br><span class="line">        mWrapper = <span class="keyword">new</span> INotificationListenerWrapper();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> mWrapper;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>到这里，就回到了最普通的bindService的流程了。</p><h2 id="监控通知"><a href="#监控通知" class="headerlink" title="监控通知"></a>监控通知</h2><p>首先回到NotificationManager中。当我们发送一个通知栏时，需要调用<code>notify(int id, Notification notification)</code>这个方法。其中会调用NotificationManagerService的<code>enqueueNotificationWithTag</code>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    service.enqueueNotificationWithTag(pkg, mContext.getOpPackageName(), tag, id,</span><br><span class="line">            stripped, idOut, UserHandle.myUserId());</span><br><span class="line">    <span class="keyword">if</span> (id != idOut[<span class="number">0</span>]) &#123;</span><br><span class="line">        Log.w(TAG, <span class="string">"notify: id corrupted: sent "</span> + id + <span class="string">", got back "</span> + idOut[<span class="number">0</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125; <span class="keyword">catch</span> (RemoteException e) &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后看一下NotificationManagerService做了些什么。<br><code>enqueueNotificationWithTag</code> -&gt; <code>enqueueNotificationInternal</code> -&gt; <code>notifyPostedLocked</code> -&gt; <code>notifyPosted</code>。<br>当我们来到<code>notifyPosted</code>方法中时，我们会看到</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">notifyPosted</span><span class="params">(<span class="keyword">final</span> ManagedServiceInfo info,</span></span></span><br><span class="line"><span class="function"><span class="params">        <span class="keyword">final</span> StatusBarNotification sbn, NotificationRankingUpdate rankingUpdate)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> INotificationListener listener = (INotificationListener)info.service;</span><br><span class="line">    StatusBarNotificationHolder sbnHolder = <span class="keyword">new</span> StatusBarNotificationHolder(sbn);</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        listener.onNotificationPosted(sbnHolder, rankingUpdate);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (RemoteException ex) &#123;</span><br><span class="line">        Log.e(TAG, <span class="string">"unable to notify listener (posted): "</span> + listener, ex);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>它调用了<code>listener.onNotificationPosted(sbnHolder, rankingUpdate)</code>。而这个<code>listener</code>接口的<code>onNotificationPosted</code>方法的实现就在NotificationListenerService中</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">INotificationListenerWrapper</span> <span class="keyword">extends</span> <span class="title">INotificationListener</span>.<span class="title">Stub</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onNotificationPosted</span><span class="params">(IStatusBarNotificationHolder sbnHolder,</span></span></span><br><span class="line"><span class="function"><span class="params">            NotificationRankingUpdate update)</span> </span>&#123;</span><br><span class="line">        StatusBarNotification sbn;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            sbn = sbnHolder.get();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (RemoteException e) &#123;</span><br><span class="line">            Log.w(TAG, <span class="string">"onNotificationPosted: Error receiving StatusBarNotification"</span>, e);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Notification.Builder.rebuild(getContext(), sbn.getNotification());</span><br><span class="line">            <span class="comment">// convert icon metadata to legacy format for older clients</span></span><br><span class="line">            createLegacyIconExtras(sbn.getNotification());</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IllegalArgumentException e) &#123;</span><br><span class="line">            <span class="comment">// drop corrupt notification</span></span><br><span class="line">            sbn = <span class="keyword">null</span>;</span><br><span class="line">            Log.w(TAG, <span class="string">"onNotificationPosted: can't rebuild notification from "</span> +</span><br><span class="line">                    sbn.getPackageName());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// protect subclass from concurrent modifications of (@link mNotificationKeys&#125;.</span></span><br><span class="line">        <span class="keyword">synchronized</span> (mWrapper) &#123;</span><br><span class="line">            applyUpdate(update);</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (sbn != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    NotificationListenerService.<span class="keyword">this</span>.onNotificationPosted(sbn, mRankingMap);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="comment">// still pass along the ranking map, it may contain other information</span></span><br><span class="line">                    NotificationListenerService.<span class="keyword">this</span>.onNotificationRankingUpdate(mRankingMap);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Throwable t) &#123;</span><br><span class="line">                Log.w(TAG, <span class="string">"Error running onNotificationPosted"</span>, t);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>这里调用了<code>NotificationListenerService.this.onNotificationPosted</code>。而它的实现就是我们创建的NotificationListenerService中重写的方法。也就是说，一个收到通知的消息最终传递到了我们的NotificationListenerService中。</p><h2 id="获取通知信息"><a href="#获取通知信息" class="headerlink" title="获取通知信息"></a>获取通知信息</h2><p>NotificationListenerService有两个抽象的回调方法（API 21以上不是抽象方法了）需要我们实现。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">onNotificationPosted(StatusBarNotification sbn)</span><br><span class="line">onNotificationRemoved(StatusBarNotification sbn)</span><br></pre></td></tr></table></figure><p>这两个方法分别在系统收到通知和移除通知的时候回调。<code>StatusBarNotification</code>这个类是对<code>Notification</code>类的封装，包含了<code>id</code>，<code>pkg</code>，<code>postTime</code>等非常有用的属性。</p><p>如果我们想要获取更多关于当前收到或移除通知的信息的话，需要我们对Android Notification的机制有更多的了解。在<code>Notification</code>类中有一个名为<code>extras</code>的<code>Bundle</code>成员，它的注释是这样的：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Additional semantic data to be carried around with this Notification.</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * The extras keys defined here are intended to capture the original inputs to &#123;<span class="doctag">@link</span> Builder&#125;</span></span><br><span class="line"><span class="comment"> * APIs, and are intended to be used by</span></span><br><span class="line"><span class="comment"> * &#123;<span class="doctag">@link</span> android.service.notification.NotificationListenerService&#125; implementations to extract</span></span><br><span class="line"><span class="comment"> * detailed information from notification objects.</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure><p>这个extras内部存储了<code>Notification.Builder</code>在build通知过程中的属性，包括<code>title</code>, <code>content</code>, <code>largeIcon</code>, <code>smallIcon</code>等。而它可以用于获取NotificationListenerService回调方法中Notification的信息。我们可以通过这样的方式来得到这些信息：（注意：<code>extras</code>需要API Level 19以上）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sbn.getNotification().extras.get(Notification.EXTRA_TITLE)</span><br><span class="line">sbn.getNotification().extras.get(Notification.EXTRA_TEXT)</span><br><span class="line">sbn.getNotification().extras.get(Notification.EXTRA_LARGE_ICON)</span><br><span class="line">......</span><br></pre></td></tr></table></figure><p>然而，有一些用户自定义的通知，如果想要获取其中的文案，则不能用上面的方法。用户自定义的通知是使用了RemoteViews来自定义界面。我们如何能获取到RemoteViews里面控件的属性呢。</p><h2 id="RemoteViews"><a href="#RemoteViews" class="headerlink" title="RemoteViews"></a>RemoteViews</h2><p>RemoteViews顾名思义是一种在远程绘制的View，它不在自己的进程绘制，而是通过IPC将RemoteViews发送到其他进程更新界面。RemoteViews的主要应用场景是Notification和AppWidget。在通知栏上应用的方式是这样的：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">Notification notification = <span class="keyword">new</span> Notification();</span><br><span class="line">notification.icon = R.mipmap.ic_launcher;</span><br><span class="line">notification.tickerText = <span class="string">"hello notification"</span>;</span><br><span class="line">notification.when = System.currentTimeMillis();</span><br><span class="line">notification.flags = Notification.FLAG_AUTO_CANCEL;</span><br><span class="line"></span><br><span class="line">Intent intent = <span class="keyword">new</span> Intent(<span class="keyword">this</span>, RemoteViewsActivity.class);</span><br><span class="line">PendingIntent pendingIntent = PendingIntent.getActivity(<span class="keyword">this</span>, <span class="number">0</span>, intent, PendingIntent.FLAG_UPDATE_CURRENT);</span><br><span class="line"></span><br><span class="line">RemoteViews remoteViews = <span class="keyword">new</span> RemoteViews(getPackageName(), R.layout.layout_notification);</span><br><span class="line">remoteViews.setTextViewText(R.id.tv, <span class="string">"这是一个Test"</span>);</span><br><span class="line">remoteViews.setTextColor(R.id.tv, Color.parseColor(<span class="string">"#abcdef"</span>));</span><br><span class="line">remoteViews.setImageViewResource(R.id.iv, R.mipmap.ic_launcher);</span><br><span class="line">PendingIntent openActivity2Pending = PendingIntent.getActivity</span><br><span class="line">            (<span class="keyword">this</span>, <span class="number">0</span>, <span class="keyword">new</span> Intent(<span class="keyword">this</span>, MainActivity.class), PendingIntent.FLAG_UPDATE_CURRENT);<span class="comment">//设置RemoveViews点击后启动界面</span></span><br><span class="line">remoteViews.setOnClickPendingIntent(R.id.tv, openActivity2Pending);</span><br><span class="line"></span><br><span class="line">notification.contentView = remoteViews;</span><br><span class="line">notification.contentIntent = pendingIntent;</span><br><span class="line">NotificationManager manager = (NotificationManager) getSystemService(Context.NOTIFICATION_SERVICE);</span><br><span class="line">    manager.notify(<span class="number">2</span>, notification);</span><br></pre></td></tr></table></figure><p>在调用<code>manager.notify(2, notification)</code>之后，NotificationManager通过Binder和SystemService进程中的NotificationManagerService通信，将RemoteViews传递过去。在SystemService进程中，RemoteViews通过之前一系列setXYZ操作添加的Actions一步一步地完成界面更新，有点类似于状态机日志，这样可以避免大量的IPC操作。而我们可以通过反射来获取当前Notification中RemoteViews的<code>mActions</code>成员，从中获取这个通知栏RemoteViews界面更新过程中需要设置的文案，字体颜色等信息。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">List actions;</span><br><span class="line">RemoteViews rv = sbn.getNotification().contentView;</span><br><span class="line"><span class="keyword">if</span> (rv == <span class="keyword">null</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    Field field = rv.getClass().getDeclaredField(<span class="string">"mActions"</span>);</span><br><span class="line">    field.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">    actions = field.get(rv);</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (Object action : actions) &#123;</span><br><span class="line">    <span class="comment">// 反射得到methodName，viewId和value...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当然，对于没有经过setXYZ操作直接将文案，颜色等内容写在layout.xml中的RemoteViews，这个方法是行不通的。</p><h2 id="一些细节"><a href="#一些细节" class="headerlink" title="一些细节"></a>一些细节</h2><ol><li>在实际监控过程中，有时会遇到收到一个通知回调多次的现象。后来发现这些sbn的<code>postTime</code>是一样的。我们可以增加一个<code>LastPostTime</code>时间戳将这些postTime相同的通知过滤掉。</li><li>由于是后台服务，如果单独在一个进程的话，很容易被系统在内存吃紧的时候杀死，这样我们的监控功能就会失效。如果可以将服务变成前台服务的话，存活的时间将会大大增长。</li><li>系统在什么时候会触发rebind操作。查看<code>rebindServices()</code>的引用会发现在<code>ManagedServices</code>的<code>onPackageChanged</code>，<code>onUserSwitched</code>以及<code>ManagedServices.SettingsObserver</code>的<code>update</code>三处会rebind。也就是在应用安装卸载时，系统用户切换时以及<code>Settings.Secure.getString(getContentResolver(), ENABLED_NOTIFICATION_LISTENERS)</code>有变化时。</li></ol>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;介绍&quot;&gt;&lt;a href=&quot;#介绍&quot; class=&quot;headerlink&quot; title=&quot;介绍&quot;&gt;&lt;/a&gt;介绍&lt;/h2&gt;&lt;p&gt;NotificationListenerService是Android API Level18新增加的一个服务，当系统通知栏有通知弹出，移除以及位置改变时，会调用这个服务相关的回调方法。因此，我们可以利用这个服务来监控系统通知栏的行为。&lt;/p&gt;
&lt;p&gt;如何在App中注册NotificationListenerService，方法很简单，首先在AndroidManifest.xml中添加一个这样的服务：&lt;/p&gt;
&lt;figure class=&quot;highlight xml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;service&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;android:name&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;.NotificationListener&quot;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;         &lt;span class=&quot;attr&quot;&gt;android:label&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;@string/service_name&quot;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;         &lt;span class=&quot;attr&quot;&gt;android:permission&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;android.permission.BIND_NOTIFICATION_LISTENER_SERVICE&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;intent-filter&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;action&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;android:name&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;android.service.notification.NotificationListenerService&quot;&lt;/span&gt; /&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;intent-filter&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;service&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;注意的是服务需要申请&lt;code&gt;BIND_NOTIFICATION_LISTENER_SERVICE&lt;/code&gt;权限也就是所谓的通知读取权限，并且在&lt;code&gt;intent-filter&lt;/code&gt;中加上&lt;code&gt;SERVICE_INTERFACE&lt;/code&gt;这个Action。然后创建一个名为&lt;code&gt;@stirng/service_name&lt;/code&gt;的服务继承NotificationListenerService。这样在App启动后并且通知读取权限已开启的情况下，我们的NotificationListenerService就可以监控通知栏事件了。&lt;/p&gt;
&lt;p&gt;还有一个注意的地方在文档里面也说得很清楚了，除了&lt;code&gt;requestRebind(ComponentName)&lt;/code&gt;以外，不应该在&lt;code&gt;onListenerConnected()&lt;/code&gt;方法回调之前做任何操作。&lt;br&gt;
    
    </summary>
    
      <category term="Android开发" scheme="http://yoursite.com/categories/Android%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="Android Notification" scheme="http://yoursite.com/tags/Android-Notification/"/>
    
  </entry>
  
  <entry>
    <title>Raft一致性算法</title>
    <link href="http://yoursite.com/2017/03/19/Raft%E4%B8%80%E8%87%B4%E6%80%A7%E7%AE%97%E6%B3%95/"/>
    <id>http://yoursite.com/2017/03/19/Raft一致性算法/</id>
    <published>2017-03-19T15:52:38.000Z</published>
    <updated>2018-05-16T09:01:02.367Z</updated>
    
    <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>Raft是分布式一致性算法的一种。通过Leader与Follower之间的日志同步和状态机来实现分布式系统的一致性。它的作用与另外一个著名的算法Paxos类似，但是Paxos过于难以理解，导致使用Paxos的系统难以保证正确性而且出现故障时调试难度也很大。Raft算法将保证一致性的策略分为三个部分，Leader election, Log replication以及Safety，是更容易理解的一致性算法。想要学习Raft算法，这篇论文是很棒的资料 <a href="https://pdos.csail.mit.edu/6.824/papers/raft-extended.pdf" target="_blank" rel="noopener">In Search of an Understandable Consensus Algorithm</a>。本文根据这篇论文总结了一下最基本的Raft算法。</p><h2 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h2><p>一个Raft节点的大致结构如图：<br><img src="/images/raft-1.png" alt=""><br><a id="more"></a></p><h3 id="Role"><a href="#Role" class="headerlink" title="Role"></a>Role</h3><p>Raft算法将分布式系统中的节点分为Leader，Follower和Candidate。<br><img src="/images/raft-2.png" alt=""></p><h3 id="State"><a href="#State" class="headerlink" title="State"></a>State</h3><p>系统中的节点会有一些所有角色都有的状态：<br>currentTerm（记录当前Term）<br>votedFor（投票给哪个节点，默认为none）<br>log[]（保存Log entries的队列)</p><p>以及一些部分角色有的状态：<br>commitIndex（该节点已commit的Log entries中最大的index）<br>lastApplied（该节点已被状态机执行的Log entries中最大的index）<br>nextIndex[]（将要发送给系统中其它每个节点的Log entres的index）<br>matchIndex[]（系统中其它每个节点已复制的Log enties的最大index）</p><h3 id="Leader-election"><a href="#Leader-election" class="headerlink" title="Leader election"></a>Leader election</h3><p>在每个Raft系统中会存在并且只有一个Leader，其它的节点为Follower。节点成为Leader后会给所有的Follower发送心跳包，心跳包中有可能包含待复制的Log entries也可能没有。在Follower等待时间超过超时时长后（时长一般会设置成随机的150ms-300ms防止Split votes）会将自己的角色改为Candidate并向其它节点发送RequestVote RPC请求投票，在收到超过半数节点的投票后成为Leader，并将currentTerm加1。其它节点在接收到新Leader的心跳后变为Follower。前面提到的Split votes是指有多个Follower同时成为Candidate请求投票，每个Candidate的票数相同，那么这次的选举结束，currentTerm也会加1，然后开始新一次选举。</p><h3 id="Term"><a href="#Term" class="headerlink" title="Term"></a>Term</h3><p>每个Leader在位时期的一个标志，在每次进行Leader election后加1。每个Term至多存在一个Leader（Split votes的状态下无Leader）<br><img src="/images/raft-3.png" alt=""></p><h3 id="Log-entry"><a href="#Log-entry" class="headerlink" title="Log entry"></a>Log entry</h3><p>Raft节点中用于记录客户端发来的命令的数据结构，Log entry结构包含Index，Command，Term三个属性。Index用来标记这条Log entry在队列中的位置，Command保存了客户端命令的内容，Term记录了当前Leader election的结果（每次Leader election结束后整个系统的currentTerm会加1）</p><h3 id="Log-replication"><a href="#Log-replication" class="headerlink" title="Log replication"></a>Log replication</h3><p>Raft节点的操作是状态机通过读取log[]队列中的内容依次执行的完成的。要达到一致性，必须保证每个节点log[]队列中的内容一致。Leader通过心跳发送AppendEntries RPC将最近到来的Log entries发送个Followers，然后Followers将收到的Log entries加入自己的log[]队列中的操作。</p><h3 id="Log-compaction"><a href="#Log-compaction" class="headerlink" title="Log compaction"></a>Log compaction</h3><p>随着系统运行时间变长，Raft节点中的log[]队列的长度会不断增长。在超过一定的大小时，节点会进行Snapshot操作，将当前的状态持久化并清空log[]。Last included index和last included term记录了Snapshot前最新的Log entry的index和term。<br><img src="/images/raft-4.png" alt=""></p><h3 id="Safety"><a href="#Safety" class="headerlink" title="Safety"></a>Safety</h3><p>为了保证Raft算法的正确性，有以下几个Safety property。</p><ol><li>Election Safety：在一个Term中最多选举出一个Leader。</li><li>Leader Append-Only：Leader不会重写或删除Log entries，只会追加Log 。entries（Election restriction：保证每次选举出来的Leader保存了所有已commit的Log entries）</li><li>Log Matching：如果两个节点上的某个Log entry的Index和Term一致，Index在该Log entry之前的Log entries完全一致。（Committing entries from previous terms）</li><li>Leader Completeness：如果某个Log entry在某个Term被commit，那么之后的Term的Leader都会含有这个Log entry。</li><li>State Machine Safety：如果一个节点将某个Log entry应用到状态机中，其它节点中应用相同Index到状态机的Log entry相同。</li></ol><h2 id="算法描述"><a href="#算法描述" class="headerlink" title="算法描述"></a>算法描述</h2><ol><li>在一个Raft Group中，初始的状态是所有节点都是Follower。</li><li>在经过随机的超时时长后某一个Follower开始Leader election并成为Leader。并向其它Follower发送心跳。</li><li>客户端在请求Raft Group时只会将命令发送给Leader，Leader通过Log replication将Log entries复制到其他Follower。在收到超过半数的Follower复制成功的消息后commit该条Log entry并放到应用到状态机中。</li><li>状态机执行命令成功后将结果返回客户端。</li><li>任何节点在log[]队列增长到一定长度后将执行Snapshot操作。</li><li>若Leader故障，最先超时的Follower变为Candidate发起Leader election。</li><li>若Candidate成功成为Leader，执行2-4。若Split votes，重新开始Leader election。无论如何currentTerm加1。</li><li>若超过半数节点故障，整个Raft Group将故障。（没有节点能成为Leader）</li><li>节点故障后恢复，将接收当前Leader的心跳，发现currentTerm小于新Leader的currentTerm，自己变为Follower。</li><li>网络分区故障后恢复，所有Follower都会回滚未commit的Log entries并从当前Leader处复制。</li></ol><h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><p>更多Raft算法的学习资料可以在<a href="https://raft.github.io/" target="_blank" rel="noopener">这里</a>找到。包括一个可视化的Raft算法执行过程以及视频讲解，还有各种语言的Raft实现。</p><p>附上我在MIT 6.824课程中的Raft实现：<br><a href="https://github.com/ts25504/mit-courses/tree/master/6.824-2016/src/raft" target="_blank" rel="noopener">https://github.com/ts25504/mit-courses/tree/master/6.824-2016/src/raft</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h2&gt;&lt;p&gt;Raft是分布式一致性算法的一种。通过Leader与Follower之间的日志同步和状态机来实现分布式系统的一致性。它的作用与另外一个著名的算法Paxos类似，但是Paxos过于难以理解，导致使用Paxos的系统难以保证正确性而且出现故障时调试难度也很大。Raft算法将保证一致性的策略分为三个部分，Leader election, Log replication以及Safety，是更容易理解的一致性算法。想要学习Raft算法，这篇论文是很棒的资料 &lt;a href=&quot;https://pdos.csail.mit.edu/6.824/papers/raft-extended.pdf&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;In Search of an Understandable Consensus Algorithm&lt;/a&gt;。本文根据这篇论文总结了一下最基本的Raft算法。&lt;/p&gt;
&lt;h2 id=&quot;基本概念&quot;&gt;&lt;a href=&quot;#基本概念&quot; class=&quot;headerlink&quot; title=&quot;基本概念&quot;&gt;&lt;/a&gt;基本概念&lt;/h2&gt;&lt;p&gt;一个Raft节点的大致结构如图：&lt;br&gt;&lt;img src=&quot;/images/raft-1.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;
    
    </summary>
    
      <category term="分布式系统" scheme="http://yoursite.com/categories/%E5%88%86%E5%B8%83%E5%BC%8F%E7%B3%BB%E7%BB%9F/"/>
    
    
      <category term="MIT 6.824" scheme="http://yoursite.com/tags/MIT-6-824/"/>
    
  </entry>
  
  <entry>
    <title>Go语言Channel的一些Tips</title>
    <link href="http://yoursite.com/2017/03/08/Go%E8%AF%AD%E8%A8%80Channel%E7%9A%84%E4%B8%80%E4%BA%9BTips/"/>
    <id>http://yoursite.com/2017/03/08/Go语言Channel的一些Tips/</id>
    <published>2017-03-08T12:19:59.000Z</published>
    <updated>2018-05-16T09:01:02.367Z</updated>
    
    <content type="html"><![CDATA[<h2 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h2><p>Golang中的Channel是一个类似于管道的类型，我们可以通过Channel来在不同的Goroutine之间传递数据。</p><p>创建Channel：<code>ch := make(chan int)</code> 或 <code>ch := make(chan int, 10)</code></p><p>前者是不带缓冲区的Channel，后者是带缓冲区的Channel。区别在于不带缓冲区的Channel在Send操作后会一直阻塞直到数据被Receive，而带缓冲区的Channel在缓冲区被填满之前都不会阻塞</p><p>Send操作：<code>ch &lt;- 1</code><br>Receive操作：<code>i := &lt;-ch</code><br>关闭操作：<code>close(ch)</code></p><h2 id="Tip1：关闭后Channel的行为"><a href="#Tip1：关闭后Channel的行为" class="headerlink" title="Tip1：关闭后Channel的行为"></a>Tip1：关闭后Channel的行为</h2><p>在Channel被执行关闭操作后，继续执行Send操作会导致<code>panic: send on closed channel</code>，而继续执行Receive操作还可以读到Channel中的数据，所有数据读取完后会不断地读到该类型默认初始化的值（如果类型为int则读到0，类型为bool则读到false）。</p><h2 id="Tip2：控制退出"><a href="#Tip2：控制退出" class="headerlink" title="Tip2：控制退出"></a>Tip2：控制退出</h2><p>该Channel所在的Goroutine在另一个Goroutine执行<code>quit &lt;- true</code>时退出。<br><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line">    select &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">x :</span>= &lt;-<span class="string">ch:</span></span><br><span class="line">        doSomething()</span><br><span class="line">    <span class="keyword">case</span> &lt;-<span class="string">quit:</span></span><br><span class="line">        quit()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="Tip3：控制超时"><a href="#Tip3：控制超时" class="headerlink" title="Tip3：控制超时"></a>Tip3：控制超时</h2><p>该Channel所在的Goroutine在等待时间t后ch仍然未接收到数据时退出。<br><figure class="highlight coq"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line">    select &#123;</span><br><span class="line">    <span class="built_in">case</span> x := &lt;-ch:</span><br><span class="line">        doSomething()</span><br><span class="line">    <span class="built_in">case</span> &lt;-<span class="built_in">time</span>.After(t):</span><br><span class="line">        <span class="built_in">timeout</span>()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="Tip4：清空缓冲区"><a href="#Tip4：清空缓冲区" class="headerlink" title="Tip4：清空缓冲区"></a>Tip4：清空缓冲区</h3><p>假如ch中已经有数据了，可以使用下面的代码来清空缓冲区。如果ch中没有数据则直接执行后面的代码。<br><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> &#123;</span><br><span class="line"><span class="keyword">case</span> &lt;-ch:</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="Tip5：定时器"><a href="#Tip5：定时器" class="headerlink" title="Tip5：定时器"></a>Tip5：定时器</h3><p>下面的代码会阻塞当前Goroutine一秒。<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">t := <span class="selector-tag">time</span>.NewTimer(<span class="selector-tag">time</span>.Second)</span><br><span class="line">&lt;-t.C</span><br></pre></td></tr></table></figure></p><p>还可以使用<code>t.Stop()</code>操作来停止这个定时器。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;基础知识&quot;&gt;&lt;a href=&quot;#基础知识&quot; class=&quot;headerlink&quot; title=&quot;基础知识&quot;&gt;&lt;/a&gt;基础知识&lt;/h2&gt;&lt;p&gt;Golang中的Channel是一个类似于管道的类型，我们可以通过Channel来在不同的Goroutine之间传递数据。&lt;
      
    
    </summary>
    
      <category term="编程语言" scheme="http://yoursite.com/categories/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"/>
    
    
      <category term="Golang" scheme="http://yoursite.com/tags/Golang/"/>
    
  </entry>
  
  <entry>
    <title>呐喊众生相</title>
    <link href="http://yoursite.com/2016/11/26/%E5%91%90%E5%96%8A%E4%BC%97%E7%94%9F%E7%9B%B8/"/>
    <id>http://yoursite.com/2016/11/26/呐喊众生相/</id>
    <published>2016-11-26T06:00:43.000Z</published>
    <updated>2018-05-16T09:01:02.367Z</updated>
    
    <content type="html"><![CDATA[<p>“在我自己，本以为现在是已经并非一个切迫而不能已于言的人了，但或者也还未能忘怀于当日自己的寂寞的悲哀罢，所以有时候仍不免呐喊几声，聊以慰藉那在寂寞里奔驰的猛士，使他不惮于前驱。” ——鲁迅</p><p>《狂人日记》<br>狂人：这个世界所有人实际上都在互相吃人于被吃，却都在伪装自己真正的目的。而作为狂人看清这一切想逃脱却只能被全世界当成“迫害狂”。难见真的人，或许只有孩子还未真正吃过人吧。不想被当成异类就不能轻易地说出“异端邪说”，人们从服从渐渐变得麻木。</p><p>《孔乙己》<br>孔乙己：如今在看孔乙己，于我们大多数人何其相似。文化人自命清高，做不到行业的顶尖（秀才）又不愿委身做一些自己不齿的事情（营生），在这个世界上苟且地活者（偷盗），想靠着自己微薄的能力一点点的向上走。不但被上流社会的人所不屑，还经常遭到比自己差的人的嘲笑。他不愿与这些人同流合污，说君子固穷，但是又没有能力往更高的地方去，于是只能每天忍受着来自这个世界满满的恶意，他想要做出一点改变让世界更美好，教人识字，却又于事无补。最后只能平庸地结束这一生。</p><p>《一件小事》<br>“我”：忽然发现在那个年代人就已经“碰瓷”的警觉了。可是那个年代人与人之间还有信任，看着车夫搀扶着那女人去了巡警分驻所，“我”的内心被震撼了，我也被震撼了。“我还能裁判车夫么？”，我们不能裁判任何人，每个人的心中都存在着恶的一面，圣人是不存在的。</p><p>《头发的故事》<br>N先生：辫子大概就是现在人所说的政治正确吧，一个人只要做了政治不正确的事情，就算他有着自己的执念，也会被这个社会所排挤。你纹身，染发你就是坏孩子，大家都有辫子你没有，你就是坏孩子。那些所谓的坏孩子也在盼望一个“双十节”的到来吧，它可以是电子竞技规范化，同性恋合法化等等。</p><p>《故乡》<br>闰土：这是我们每个人都有的故事，从童年的天真无邪，与人相处真心对待，无视地位，阶级，财富，到长大后的懂得人情世故，经过这个社会一遍又一遍地筛选后认清了自己的地位，对自己地位高的人毕恭毕敬，对地位不如自己的人不屑一顾。唯有见到自己儿时的伙伴，同学，才会重新看到自己压抑伪装了很久的真心。长大后的我们都喜欢像水生宏儿这样的孩子，但我们也知道，他们迟早也会成为闰土。</p><p>《阿Q正传》<br>阿Q：精神胜利法大概是阿Q正传得以出名的原因吧。打游戏输了，我们摔锅给队友。看到别人的成功，我们总以为其中有不正当的勾当。看到别人失败，我们心中有时会偷偷窃喜，还想着如果换了我一定能成功。我们有时都会用这种扭曲的暗示来安慰自己脆弱的内心。经常幻想着自己是赵家人，自己能加入革命党，可是现实总是那么残酷。说到底还是自身的弱小滋生了阴暗的内心。</p><p>《端午节》<br>方玄绰：这是一个虚伪而又爱面子并且胆小怕事的形象，他的口头禅“差不多”一是为了伪装自己假装不屑，二是为了避免发表自己的观点怕露怯丢了面子，三是真正遇到事情时逃避的借口。政府不发工资他不愿自己去要觉得失了身份而且怕受委屈，这或许就是我们通常所说的“玻璃心”吧。这是一个真正的“差不多先生”。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;“在我自己，本以为现在是已经并非一个切迫而不能已于言的人了，但或者也还未能忘怀于当日自己的寂寞的悲哀罢，所以有时候仍不免呐喊几声，聊以慰藉那在寂寞里奔驰的猛士，使他不惮于前驱。” ——鲁迅&lt;/p&gt;
&lt;p&gt;《狂人日记》&lt;br&gt;狂人：这个世界所有人实际上都在互相吃人于被吃，却都
      
    
    </summary>
    
      <category term="读书" scheme="http://yoursite.com/categories/%E8%AF%BB%E4%B9%A6/"/>
    
    
      <category term="鲁迅" scheme="http://yoursite.com/tags/%E9%B2%81%E8%BF%85/"/>
    
  </entry>
  
  <entry>
    <title>再见，小丸子</title>
    <link href="http://yoursite.com/2016/11/11/%E5%86%8D%E8%A7%81%EF%BC%8C%E5%B0%8F%E4%B8%B8%E5%AD%90/"/>
    <id>http://yoursite.com/2016/11/11/再见，小丸子/</id>
    <published>2016-11-11T08:29:55.000Z</published>
    <updated>2018-05-16T09:01:02.367Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/images/xiaowanzi2.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;/images/xiaowanzi2.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;

      
    
    </summary>
    
      <category term="生活" scheme="http://yoursite.com/categories/%E7%94%9F%E6%B4%BB/"/>
    
    
      <category term="光棍节快乐" scheme="http://yoursite.com/tags/%E5%85%89%E6%A3%8D%E8%8A%82%E5%BF%AB%E4%B9%90/"/>
    
  </entry>
  
  <entry>
    <title>macOS Sierra系统Gradle构建速度异常慢的解决方案</title>
    <link href="http://yoursite.com/2016/10/25/macOS-Sierra%E7%B3%BB%E7%BB%9FGradle%E6%9E%84%E5%BB%BA%E9%80%9F%E5%BA%A6%E5%BC%82%E5%B8%B8%E6%85%A2%E7%9A%84%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/"/>
    <id>http://yoursite.com/2016/10/25/macOS-Sierra系统Gradle构建速度异常慢的解决方案/</id>
    <published>2016-10-25T11:18:47.000Z</published>
    <updated>2018-05-16T09:01:02.367Z</updated>
    
    <content type="html"><![CDATA[<p>上周刚刚升级了macOS Sierra系统，升级后在使用gradle构建项目时发现在Resolving dependencies这一步变得奇慢无比，本来3分钟能够构建完成的项目用了30多分钟才构建完，这给我带来的不小的困扰。在Google了很多资料后，终于解决了这个问题。</p><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><p>首先打开host文件</p><pre><code>sudo vim /etc/hosts</code></pre><p>把host文件中有localhost的行后面加上yourmacname.local即可。</p><pre><code>127.0.0.1   localhost yourmacname.local::1         localhost yourmacname.local</code></pre><p>yourmacname是你计算机的名字，在System Preferences - Sharing中能够找到</p><h2 id="根本原因"><a href="#根本原因" class="headerlink" title="根本原因"></a>根本原因</h2><p>出现问题的根本原因在于<code>java.net.InetAddress.getLocalHost()</code>这个函数耗时严重，在新版macOS上会耗时5000ms左右，而在其它机器上耗时仅为8ms。因此，gradle在构建时大量调用这个方法就会导致构建异常缓慢。根据<a href="https://github.com/thoeni/inetTester" target="_blank" rel="noopener">这个实验</a>我们知道了解决这个问题的办法就是在localhost后面加上yourmacname.local，这是更新到macOS Sierra的一个坑。</p><p>最后，总结一下最近更新macOS Sierra遇到的其它坑，希望以后找到解决方案。</p><ol><li>Mou失效了</li><li>QQ截图不能直接使用</li><li>使用预览看PDF的时候三指取词功能失效</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;上周刚刚升级了macOS Sierra系统，升级后在使用gradle构建项目时发现在Resolving dependencies这一步变得奇慢无比，本来3分钟能够构建完成的项目用了30多分钟才构建完，这给我带来的不小的困扰。在Google了很多资料后，终于解决了这个问题。&lt;
      
    
    </summary>
    
      <category term="Android开发" scheme="http://yoursite.com/categories/Android%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="疑难问题" scheme="http://yoursite.com/tags/%E7%96%91%E9%9A%BE%E9%97%AE%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>MapReduce</title>
    <link href="http://yoursite.com/2016/10/23/MapReduce/"/>
    <id>http://yoursite.com/2016/10/23/MapReduce/</id>
    <published>2016-10-23T06:51:46.000Z</published>
    <updated>2018-05-16T09:01:02.367Z</updated>
    
    <content type="html"><![CDATA[<p>学习MapReduce最好的资料莫过于Jeffrey Dean和Sanjay Ghemawat的论文<a href="http://nil.csail.mit.edu/6.824/2015/papers/mapreduce.pdf" target="_blank" rel="noopener">MapReduce: Simplified Data Processing on Large Clusters</a>。里面详细地讲述了MapReduce的来龙去脉，实现，执行过程以及在实际中的运用等等。</p><p>MapReduce是一种运行于分布式系统上的计算模型，它的思想跟分治的思想很类似，将一个大的问题划分成若干小问题，再将那些小问题并行处理最后将结果汇总得到最终的结果。MapReduce顾名思义由Map和Reduce组成，Map操作将一个大的问题划分成若干份，并以键值对的形式存储，Reduce操作以之前的键通过Hash等手段分配到若干个Reduce worker上进行计算，最终汇总得到结果。</p><p>MapReduce的算法逻辑论文中的一张图十分清晰地表现了<br><img src="/images/mapreduce.jpg" alt=""><br>有几点需要注意的事所有Map节点和Reduce节点都是普通的Worker节点，而需要分配多少Woker节点，每个Worker是执行Map操作还是Reduce操作都是由一个单独的Master节点决定的。在执行完Map或Reduce后，执行的结果都会存储到本地磁盘进行持久化，这也是为了容灾处理，可以在节点失效后正确地恢复。</p><p><a href="https://pdos.csail.mit.edu/6.824/notes/l01.txt" target="_blank" rel="noopener">这里的讨论</a>可以帮助我们更好地理解MapReduce的细节。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;学习MapReduce最好的资料莫过于Jeffrey Dean和Sanjay Ghemawat的论文&lt;a href=&quot;http://nil.csail.mit.edu/6.824/2015/papers/mapreduce.pdf&quot; target=&quot;_blank&quot; rel=
      
    
    </summary>
    
      <category term="分布式系统" scheme="http://yoursite.com/categories/%E5%88%86%E5%B8%83%E5%BC%8F%E7%B3%BB%E7%BB%9F/"/>
    
    
      <category term="MIT 6.824" scheme="http://yoursite.com/tags/MIT-6-824/"/>
    
  </entry>
  
  <entry>
    <title>Android网络请求的好搭档－Volley和Gson</title>
    <link href="http://yoursite.com/2016/10/16/Android%E7%BD%91%E7%BB%9C%E8%AF%B7%E6%B1%82%E7%9A%84%E5%A5%BD%E6%90%AD%E6%A1%A3%EF%BC%8DVolley%E5%92%8CGson/"/>
    <id>http://yoursite.com/2016/10/16/Android网络请求的好搭档－Volley和Gson/</id>
    <published>2016-10-16T07:19:01.000Z</published>
    <updated>2018-05-16T09:01:02.366Z</updated>
    
    <content type="html"><![CDATA[<p>最近做了一个模块需要在Android客户端做网络请求，调用服务端提供的REST API。由于开发时间紧，网络请求次数和接口个数都比较多，如果使用自带的HttpURLConnection和HttpClient加上Java自身提供的Json库开发效率会很低，而网上的开源库例如okhttp或Retrofit我都缺乏了解。为了求稳，便使用了Google官方开发的网络库Volley和Json解析库Gson，使用起来发现非常的顺手，跟服务端提供的API几乎无缝衔接.</p><h2 id="Volley"><a href="#Volley" class="headerlink" title="Volley"></a>Volley</h2><p>首先Volley库的使用可以参考Android开发的官方文档Training中的<a href="https://developer.android.com/training/volley/index.html" target="_blank" rel="noopener">Transmitting Network Data Using Volley</a>这一章的内容。最开始只需了解如何send a request，cancel a request，custom request这些基本的操作。接下来文档中的Use a Singleton Pattern将RequestQueue封装成单例的思想以及文档中非常重要的一张图：<img src="/images/volley-request.png" alt=""></p><p>都是值得好好学习的，可以了解到对于Volley最基本的封装以及在使用Volley库的过程中哪些代码运行在哪些线程的问题。</p><h2 id="Gson"><a href="#Gson" class="headerlink" title="Gson"></a>Gson</h2><p>Gson是Google开发的将Json串和JavaBean相互转换的非常方便易用的库。Github地址在<a href="https://github.com/google/gson" target="_blank" rel="noopener">https://github.com/google/gson</a>。具体的使用方法只要阅读README中的user guide就能掌握了。具体的功能有Json串和JavaBean的相互转换，包括数组，嵌套类，并且可以自定义一些内容，例如控制哪些字段需要操作哪些不需要，空值的操作等等。Gson库我认为比较难的一点在于如何定义JavaBean中字段的类型，尤其是在有泛型和容器类的情况下。<br><a id="more"></a></p><h2 id="实际用法"><a href="#实际用法" class="headerlink" title="实际用法"></a>实际用法</h2><p>我在使用Volley + Gson的组合的时候，首先参考了官方文档<a href="https://developer.android.com/training/volley/request-custom.html" target="_blank" rel="noopener">Implementing a Custom Request</a>中的一个Example：GsonRequest<br>稍做修改使其支持传入JSON格式的参数，并且规定字符集为utf-8<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GsonRequest</span>&lt;<span class="title">T</span>&gt; <span class="keyword">extends</span> <span class="title">Request</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** Default charset for JSON request. */</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">static</span> <span class="keyword">final</span> String PROTOCOL_CHARSET = <span class="string">"utf-8"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** Content type for request. */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String PROTOCOL_CONTENT_TYPE =</span><br><span class="line">            String.format(<span class="string">"application/json; charset=%s"</span>, PROTOCOL_CHARSET);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Listener&lt;T&gt; mListener;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Gson mGson;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Class&lt;T&gt; mClass;</span><br><span class="line">    <span class="keyword">private</span> String mRequestBody;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">GsonRequest</span><span class="params">(<span class="keyword">int</span> method, String url, Class&lt;T&gt; clazz, Listener&lt;T&gt; listener,</span></span></span><br><span class="line"><span class="function"><span class="params">                       ErrorListener errorListener, String requestBody)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(method, url, errorListener);</span><br><span class="line">        mGson = <span class="keyword">new</span> Gson();</span><br><span class="line">        mClass = clazz;</span><br><span class="line">        mListener = listener;</span><br><span class="line">        mRequestBody = requestBody;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getBodyContentType</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> PROTOCOL_CONTENT_TYPE;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">byte</span>[] getBody() &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> mRequestBody == <span class="keyword">null</span> ? <span class="keyword">null</span> : mRequestBody.getBytes(PROTOCOL_CHARSET);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (UnsupportedEncodingException uee) &#123;</span><br><span class="line">            VolleyLog.wtf(<span class="string">"Unsupported Encoding while trying to get the bytes of %s using %s"</span>,</span><br><span class="line">                    mRequestBody, PROTOCOL_CHARSET);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> Response&lt;T&gt; <span class="title">parseNetworkResponse</span><span class="params">(NetworkResponse response)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            String jsonString = <span class="keyword">new</span> String(response.data,</span><br><span class="line">                    HttpHeaderParser.parseCharset(response.headers));</span><br><span class="line">            jsonString = handleResponse(jsonString);</span><br><span class="line">            <span class="keyword">return</span> Response.success(mGson.fromJson(jsonString, mClass),</span><br><span class="line">                    HttpHeaderParser.parseCacheHeaders(response));</span><br><span class="line">        &#125; <span class="keyword">catch</span> (UnsupportedEncodingException e) &#123;</span><br><span class="line">            <span class="keyword">return</span> Response.error(<span class="keyword">new</span> ParseError(e));</span><br><span class="line">        &#125; <span class="keyword">catch</span> (JSONException e) &#123;</span><br><span class="line">            <span class="keyword">return</span> Response.error(<span class="keyword">new</span> ParseError(e));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> String <span class="title">handleResponse</span><span class="params">(String response)</span> <span class="keyword">throws</span> JSONException </span>&#123;</span><br><span class="line">        <span class="comment">// Handle response JSON</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">deliverResponse</span><span class="params">(T response)</span> </span>&#123;</span><br><span class="line">        mListener.onResponse(response);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>如果有上传文件的需求，可以将请求的Content-Type改为<a href="&quot;https://www.w3.org/Protocols/rfc1341/7_2_Multipart.html&quot;">MultiPart</a>类型的请求。新建一个MultipartRequest类继承GsonRequest类，参数存放在Part数组中，如果参数要增加文件就像数组中添加相应FilePart类，增加字符串就添加StringPart类。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MultipartRequest</span>&lt;<span class="title">T</span>&gt; <span class="keyword">extends</span> <span class="title">GsonRequest</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Part[] parts;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MultipartRequest</span><span class="params">(String url, Class&lt;T&gt; clazz, Response.Listener&lt;T&gt; listener, Response.ErrorListener errorListener, Part[] parts)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(Method.POST, url, clazz, listener, errorListener, <span class="keyword">null</span>);</span><br><span class="line">        <span class="keyword">this</span>.parts = parts;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getBodyContentType</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"multipart/form-data; boundary="</span> + Part.getBoundary();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">byte</span>[] getBody() &#123;</span><br><span class="line">        ByteArrayOutputStream baos = <span class="keyword">new</span> ByteArrayOutputStream();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Part.sendParts(baos, parts);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            VolleyLog.e(e, <span class="string">"error when sending parts to output!"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> baos.toByteArray();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>接着对请求进行一层简单的封装（POST请求和GET请求的参数类型应与服务端API保持一致）：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NetworkInterfaces</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String URL = <span class="string">"REST API URL"</span>;</span><br><span class="line">    <span class="keyword">private</span> RequestQueue mRequestQueue;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String TAG = <span class="string">"MY_REQUEST"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">NetworkInterfaces</span><span class="params">(Context context)</span> </span>&#123;</span><br><span class="line">        mRequestQueue = Volley.newRequestQueue(context.getApplicationContext());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> &lt;T&gt; <span class="function"><span class="keyword">void</span> <span class="title">requestMultipartPost</span><span class="params">(String url, Class&lt;T&gt; claszz, Listener&lt;T&gt; listener, ErrorListener errorListener, Part[] parts)</span> </span>&#123;</span><br><span class="line">        MultipartRequest&lt;T&gt; multipartRequest = <span class="keyword">new</span> MultipartRequest(url, clazz, listener, errorListener, parts);</span><br><span class="line">        multipartRequest.setRetryPolicy(<span class="keyword">new</span> DefaultRetryPolicy(<span class="number">0</span>, DefaultRetryPolicy.DEFAULT_MAX_RETRIES, DefaultRetryPolicy.DEFAULT_BACKOFF_MULT));</span><br><span class="line">        multipartRequest.setTag(TAG);</span><br><span class="line">        mRequestQueue.add(multipartRequest);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> &lt;T&gt; <span class="function"><span class="keyword">void</span> <span class="title">requestPost</span><span class="params">(String url, Class&lt;T&gt; clazz, Listener&lt;T&gt; listener, ErrorListener errorListener, JSONObject params)</span> </span>&#123;</span><br><span class="line">        GsonRequest&lt;T&gt; gsonRequest = <span class="keyword">new</span> GsonRequest&lt;&gt;(Method.POST, url, clazz, listener, errorListener, params == <span class="keyword">null</span> ? <span class="keyword">null</span> : params.toString());</span><br><span class="line">        gsonRequest.setRetryPolicy(<span class="keyword">new</span> DefaultRetryPolicy(<span class="number">0</span>, DefaultRetryPolicy.DEFAULT_MAX_RETRIES, DefaultRetryPolicy.DEFAULT_BACKOFF_MULT));</span><br><span class="line">        gsonRequest.setTag(TAG);</span><br><span class="line">        mRequestQueue.add(gsonRequest);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> &lt;T&gt; <span class="function"><span class="keyword">void</span> <span class="title">requestGet</span><span class="params">(String url, Class&lt;T&gt; clazz, Listener&lt;T&gt; listener, ErrorListener errorListener, String params)</span> </span>&#123;</span><br><span class="line">        url = url + <span class="string">"?"</span> + params;</span><br><span class="line">        GsonRequest&lt;T&gt; gsonRequest = <span class="keyword">new</span> GsonRequest&lt;&gt;(Method.GET, url, clazz, listener, errorListener, params);</span><br><span class="line">        gsonRequest.setRetryPolicy(<span class="keyword">new</span> DefaultRetryPolicy(<span class="number">0</span>, DefaultRetryPolicy.DEFAULT_MAX_RETRIES, DefaultRetryPolicy.DEFAULT_BACKOFF_MULT));</span><br><span class="line">        gsonRequest.setTag(TAG);</span><br><span class="line">        mRequestQueue.add(gsonRequest);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">requestAPI1</span><span class="params">(Listener&lt;API1ResponseBean&gt; listener, ErrorListener errorListener, JSONObject params)</span> </span>&#123;</span><br><span class="line">        requestPost(URL + <span class="string">"/api1"</span>, API1ResponseBean.class, listener, errorListener, params);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">requestAPI2</span><span class="params">(Listener&lt;API2ResponseBean&gt; listener, ErrorListener errorListener, String params)</span> </span>&#123;</span><br><span class="line">        requestGet(URL + <span class="string">"/api2"</span>, API2ResponseBean.class, listener, errorListener, params);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">requestAPI3</span><span class="params">(Listener&lt;API3ResponseBean&gt; listener, ErrorListener errorListener, Part[] parts)</span> </span>&#123;</span><br><span class="line">        requestMultipartPost(URL + <span class="string">"/api3"</span>, API3ResponseBean.class, listener, errorListener, parts);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onStop</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (mRequestQueue != <span class="keyword">null</span>) &#123;</span><br><span class="line">            mRequestQueue.cancelAll(TAG);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>最后再根据Response的Json串格式定义相应的ResponseBean即可完成一个简单的网络请求层。</p><h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><ol><li>在GsonResponse的parseNetworkResponse方法可以对返回的Json串进行处理使其与我们定义的JavaBean兼容(handleResponse方法)，便于Gson库的转换。</li><li>Request的setRetryPolicy可以设置请求的超时时长和重试次数。</li><li>在网络请求结束后可以调用mRequestQueue.cancelAll()来清空队列中剩余的请求，可以定义TAG来清除特定的网络请求。</li></ol><h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><p>优秀的库往往包含了优秀的代码，在使用Volley和Gson之后大概阅读一下他们的源码，会发现层次结构非常清晰，针对接口编程，大量使用组合而不是继承，对外暴露的接口往往十分简单容易理解。其次扩展性很强，用户通常能根据实际的业务需求自定义相关的类，在原有功能的基础上实现自己需要的功能。这些都是非常值得学习的设计思想。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近做了一个模块需要在Android客户端做网络请求，调用服务端提供的REST API。由于开发时间紧，网络请求次数和接口个数都比较多，如果使用自带的HttpURLConnection和HttpClient加上Java自身提供的Json库开发效率会很低，而网上的开源库例如okhttp或Retrofit我都缺乏了解。为了求稳，便使用了Google官方开发的网络库Volley和Json解析库Gson，使用起来发现非常的顺手，跟服务端提供的API几乎无缝衔接.&lt;/p&gt;
&lt;h2 id=&quot;Volley&quot;&gt;&lt;a href=&quot;#Volley&quot; class=&quot;headerlink&quot; title=&quot;Volley&quot;&gt;&lt;/a&gt;Volley&lt;/h2&gt;&lt;p&gt;首先Volley库的使用可以参考Android开发的官方文档Training中的&lt;a href=&quot;https://developer.android.com/training/volley/index.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Transmitting Network Data Using Volley&lt;/a&gt;这一章的内容。最开始只需了解如何send a request，cancel a request，custom request这些基本的操作。接下来文档中的Use a Singleton Pattern将RequestQueue封装成单例的思想以及文档中非常重要的一张图：&lt;img src=&quot;/images/volley-request.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;都是值得好好学习的，可以了解到对于Volley最基本的封装以及在使用Volley库的过程中哪些代码运行在哪些线程的问题。&lt;/p&gt;
&lt;h2 id=&quot;Gson&quot;&gt;&lt;a href=&quot;#Gson&quot; class=&quot;headerlink&quot; title=&quot;Gson&quot;&gt;&lt;/a&gt;Gson&lt;/h2&gt;&lt;p&gt;Gson是Google开发的将Json串和JavaBean相互转换的非常方便易用的库。Github地址在&lt;a href=&quot;https://github.com/google/gson&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://github.com/google/gson&lt;/a&gt;。具体的使用方法只要阅读README中的user guide就能掌握了。具体的功能有Json串和JavaBean的相互转换，包括数组，嵌套类，并且可以自定义一些内容，例如控制哪些字段需要操作哪些不需要，空值的操作等等。Gson库我认为比较难的一点在于如何定义JavaBean中字段的类型，尤其是在有泛型和容器类的情况下。&lt;br&gt;
    
    </summary>
    
      <category term="Android开发" scheme="http://yoursite.com/categories/Android%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="Volley" scheme="http://yoursite.com/tags/Volley/"/>
    
      <category term="Gson" scheme="http://yoursite.com/tags/Gson/"/>
    
  </entry>
  
  <entry>
    <title>Awesome Koans</title>
    <link href="http://yoursite.com/2016/08/16/koans/"/>
    <id>http://yoursite.com/2016/08/16/koans/</id>
    <published>2016-08-16T09:14:06.000Z</published>
    <updated>2018-05-16T09:01:02.366Z</updated>
    
    <content type="html"><![CDATA[<h3 id="What-is-Koan"><a href="#What-is-Koan" class="headerlink" title="What is Kōan"></a>What is <a href="https://en.wikipedia.org/wiki/K%C5%8Dan#Sources" target="_blank" rel="noopener">Kōan</a></h3><p>Koan（公案）是佛教禅宗的术语，乃是佛教禅宗祖师的一段言行或者一个小故事，用于引导和开悟。</p><p>编程语言的学习也有一种公案形式的学习方法，是我见过的最好的学习一门新的编程语言的方式。以<a href="https://en.wikipedia.org/wiki/Test-driven_development" target="_blank" rel="noopener">TDD</a>的形式，预先编写好每一个知识点的测试代码，引导学习者使用相关的知识编写代码以通过测试。这种像闯关一样的形式让人充满的学习的动力，也解决了很多人学习过程中只有纸上谈兵而没有动手机会的问题。</p><p>这个<a href="https://github.com/ts25504/awesome-koans" target="_blank" rel="noopener">Repo</a>用于收集各种语言可用的koans方便学习。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;What-is-Koan&quot;&gt;&lt;a href=&quot;#What-is-Koan&quot; class=&quot;headerlink&quot; title=&quot;What is Kōan&quot;&gt;&lt;/a&gt;What is &lt;a href=&quot;https://en.wikipedia.org/wiki/K%C
      
    
    </summary>
    
      <category term="编程语言" scheme="http://yoursite.com/categories/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"/>
    
    
      <category term="Koans" scheme="http://yoursite.com/tags/Koans/"/>
    
  </entry>
  
  <entry>
    <title>MIT-6.824学习之路</title>
    <link href="http://yoursite.com/2016/08/16/MIT-6-824%E5%AD%A6%E4%B9%A0%E4%B9%8B%E8%B7%AF/"/>
    <id>http://yoursite.com/2016/08/16/MIT-6-824学习之路/</id>
    <published>2016-08-15T16:37:21.000Z</published>
    <updated>2018-05-16T09:01:02.366Z</updated>
    
    <content type="html"><![CDATA[<p>最近几个月利用业余时间学习了大名鼎鼎的MIT 6.824 分布式系统课程。我跟的是2015年的课程内容，Lab的内容是使用Go语言实现一个分布式数据库。这门课主要是读Paper和做Lab，比较适合自学，但是阅读量和代码量还有课程的难度还是相当大的，缺少自我驱动力的情况下很难坚持。尤其是我这种上班族，一周差不多只有晚上下班后可以有一整块的时间用来学习，平均一周还得加几天班，完全是学一点是一点的状态，但是兴趣还是驱使我坚持了下来。这门课对于一个完全没接触过分布式系统的人来说是一个很好的入门教程，但是它的难度和大量的学习内容还是能把人弄得痛不欲生。我也总结一下自己学习的过程可以给新入坑的同学做个入坑指南。<br><a id="more"></a><br>在课程的<a href="http://nil.csail.mit.edu/6.824/2015/index.html" target="_blank" rel="noopener">官网</a>（现在2016年的<a href="https://pdos.csail.mit.edu/6.824/" target="_blank" rel="noopener">官网</a>也上线了，新学的可以直接跟2016年的课程，在2015年的基础上增加了一些内容）有一个Schedule，布置了每周需要完成的任务，包括阅读推荐的Paper，还有针对Paper内容的一些问题可以让人抓住重点，然后就是做Lab了。</p><p>这门课对人的英语也是一个挑战，所有的Paper，Question，Lab都是英文描述的，使用非母语学习一个陌生的领域速度是相当慢的，但是没办法，计算机领域的好东西大部分都是英文的，不迎难而上就永远没法提高自己，没事把自己扔出舒适区虐一虐还是挺爽的。</p><p>在真正开始学习这门课之前，我推荐阅读一下这篇文章：<a href="http://book.mixu.net/distsys/" target="_blank" rel="noopener">Distributed systems, for fun and profit</a>。算是科普一下分布式系统领域的一些基础知识和基本理念，这篇文章的作用用作者的原话来说就是</p><pre><code>To me, that means two things: introducing the key concepts that you will need in order to have a good time reading more serious texts, and providing a narrative that covers things in enough detail that you get a gist of what&apos;s going on without getting stuck on details.</code></pre><p>通过这篇文章对分布式系统有了大致的轮廓之后，就可以开始刷Paper和Lab了。Schedule为我们规划了一个合适的路线来打怪升级，当周Lab的内容与布置的Paper或多或少都有联系，比如MapReduce，Fault-Tolerant，Paxos等，还有一些Paper是与当前流行的技术有关的话题，如Spark，Bitcoin。时间充裕的话静下心来花一整块时间读完一篇还是很有收获的，不懂的地方多用Google。最好是先对Paper所讨论的话题有一个大概的了解，可以通过维基百科等网站，比如Paxos，如果你不理解什么是一致性，容错，是没法读下去的。</p><p>整个课程一共有5个Lab，MapReduce，Primary/Backup，Paxos，Shards，Persistence。每个Lab都有若干个Part，每个Part都会有一个大致的代码框架和完整的测试代码，可以从网站上给的git地址下载下来。一定要仔细阅读每个Part具体要做什么，然后到相应的代码位置补充相关的实现。在代码中需要我们添加代码的位置都有注释提示，不能添加代码的位置也有相应的注释，最好按照人家的要求做。在添加代码的同时也不要忘了阅读题目下面的一系列Hint，那些都是容易踩到的坑以及给你的一些提示。在理解了题目意思之后建议先看一下测试代码(test_test.go)，了解每个方法的输入输出是什么，根据测试驱动开发。</p><p>以后想详细地一个一个地总结一下这些Lab，当作温故而知新。我现在的进度是Lab基本上已经完成，Paper就读了跟Lab内容相关的几篇，没办法整块的时间太少了，而读Paper又想一口气读完一篇不想思路断掉。接下来还是想在业余时间把课程推荐的Paper尽量读完。</p><p>最后，我总结了一些是我认为学完这门课后必须了解的概念（不断补充中）</p><ol><li>MapReduce</li><li>RPC</li><li>Goroutine</li><li>Primary/Backup</li><li>Paxos</li><li>Raft</li><li>Spark</li><li>Shard</li><li>Scalability</li><li>Performance</li><li>Availability</li><li>Partition and Replicate</li><li>CAP and FLP</li><li>Consistency</li><li>Fault tolerance</li><li>2PC and 3PC</li><li>Byzantine fault tolerance</li><li>GFS</li><li>Big Table</li><li>Time and order and clocks</li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近几个月利用业余时间学习了大名鼎鼎的MIT 6.824 分布式系统课程。我跟的是2015年的课程内容，Lab的内容是使用Go语言实现一个分布式数据库。这门课主要是读Paper和做Lab，比较适合自学，但是阅读量和代码量还有课程的难度还是相当大的，缺少自我驱动力的情况下很难坚持。尤其是我这种上班族，一周差不多只有晚上下班后可以有一整块的时间用来学习，平均一周还得加几天班，完全是学一点是一点的状态，但是兴趣还是驱使我坚持了下来。这门课对于一个完全没接触过分布式系统的人来说是一个很好的入门教程，但是它的难度和大量的学习内容还是能把人弄得痛不欲生。我也总结一下自己学习的过程可以给新入坑的同学做个入坑指南。&lt;br&gt;
    
    </summary>
    
      <category term="分布式系统" scheme="http://yoursite.com/categories/%E5%88%86%E5%B8%83%E5%BC%8F%E7%B3%BB%E7%BB%9F/"/>
    
    
      <category term="MIT 6.824" scheme="http://yoursite.com/tags/MIT-6-824/"/>
    
      <category term="Golang" scheme="http://yoursite.com/tags/Golang/"/>
    
  </entry>
  
  <entry>
    <title>Java生存指南</title>
    <link href="http://yoursite.com/2016/08/04/Java%E7%94%9F%E5%AD%98%E6%8C%87%E5%8D%97/"/>
    <id>http://yoursite.com/2016/08/04/Java生存指南/</id>
    <published>2016-08-03T17:32:51.000Z</published>
    <updated>2018-05-16T09:01:02.366Z</updated>
    
    <content type="html"><![CDATA[<p>在工作中从C++转到使用Java有一段时间了。Java语言与C++十分相似，Effective C++中说，C++作为一个语言联邦，其中包含C，Object-Oriented C++，Template C++和STL。而Java的面向对象对比C++的OO和数据容器如List、Set、Map对比C++的STL，这两方面两种语言除去语言本身的一些细节几乎可以无缝转换。</p><p>但是本文讨论的不是Java语言层面的内容，之前看了一篇叫做<a href="http://hadihariri.com/2013/12/29/jvm-minimal-survival-guide-for-the-dotnet-developer/" target="_blank" rel="noopener">JVM Minimal Survival Guide</a>的文章，将.NET平台与Java平台作对比，里面介绍了JVM的一些概念和Java在各个领域的一些杀手级应用。我也想自上而下地整理一下在Java环境中生存的基础知识，可以看成是那篇文章Basic部分的一些补充。<br><a id="more"></a></p><h3 id="常识"><a href="#常识" class="headerlink" title="常识"></a>常识</h3><h4 id="Java版本"><a href="#Java版本" class="headerlink" title="Java版本"></a>Java版本</h4><p>通过以下命令查询Java版本</p><pre><code>java -version</code></pre><p>你将会得到：</p><pre><code>java version &quot;1.8.0_92&quot;Java(TM) SE Runtime Environment (build 1.8.0_92-b14)Java HotSpot(TM) 64-Bit Server VM (build 25.92-b14, mixed mode)</code></pre><p>通常所说的Java8就是java version以1.8开头，以此类推Java7就是1.7开头。</p><h4 id="JDK与JRE"><a href="#JDK与JRE" class="headerlink" title="JDK与JRE"></a>JDK与JRE</h4><p>JDK全称Java Development Kit，JRE全称Java Runtime Environment。前者包括后者，并且包含Java编译器，调试器以及各种开发需要的工具，还有一些DEMO和库。而JRE是运行Java程序必备的运行时环境，包含了Java虚拟机JVM以及运行时库。</p><h4 id="JAVA环境变量"><a href="#JAVA环境变量" class="headerlink" title="JAVA环境变量"></a>JAVA环境变量</h4><p>相信很多人在初学Java的时候都为了环境变量而头疼过。Java有3个环境变量，CLASSPATH，PATH和JAVA_HOME。CLASS_PATH是JVM加载类的路径，PATH是Java各种工具javac，javadoc等等的路径，JAVA_HOME是JDK的安装路径。一般像这样配置：</p><pre><code>JAVA_HOME=JDK的安装目录CLASSPATH=.:$JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jarPATH=$JAVA_HOME/bin:$PATH</code></pre><h3 id="语言"><a href="#语言" class="headerlink" title="语言"></a>语言</h3><p>从语言层面上，Java一直以来收到很多人的诟病。包括代码写出来复杂，死板，很多重要的语言特性的缺失，包括函数默认参数，纯OO没有FP的特性(Lambda，高阶函数)，运算符重载等，虽然某些特性在Java8中得到了支持，但是对比现代的编程语言仍然像一个步履蹒跚的老者。</p><p>可是即使你不喜欢Java语言，你也可以在Java的生态中活得很好。</p><p>Scala凭借Spark在Java生态中大放异彩，被称为复杂度超越C++的宇宙最难语言，Groovy语法简洁适用于编写脚本（现在Android开发官方的构建脚本Gradle就是使用Groovy语言），纯函数式编程语言Clojure，以及Android平台的Swift－Kotlin，还有JRuby，Jython这些移植到JVM的语言。这些基于JVM的语言各有所长，让Java这个平台几乎无所不能。更可怕的一点在于，因为都是运行在JVM上的语言，只需要很小的工作量就可以使用Java大量成熟的库，这使得每新出一门语言就可以直接享受各种强大的代码库。这是最近几年崛起的Go，Rust等语言梦寐以求的好处。</p><h3 id="字节码"><a href="#字节码" class="headerlink" title="字节码"></a>字节码</h3><p>JVM上的语言都是跨平台的，原因就在于这些语言一次编译成JVM字节码，就可以到处运行。这些语言在通过编译器生成.class文件，通常每个.class文件对应一个Java类，这些.class文件可以放到任何安装了JVM的平台下运行。JVM就像一个黑盒，隐藏了不同平台之间的差异，上层看到的就只有编译出.class文件放到JVM上执行而不需要关注更加底层的东西，计算机技术的发展就是不断地增加层次，不断地抽象，底层对上层更加的透明化。</p><h3 id="包"><a href="#包" class="headerlink" title="包"></a>包</h3><p>Java的包本质上是将一些相关的文件打包并压缩在一起，根据不同的使用场景有以下几种格式：</p><h4 id="JAR"><a href="#JAR" class="headerlink" title="JAR"></a>JAR</h4><p>Java Archive File，以ZIP格式为基础，里面包含配置信息META-INF以及一系列.class文件。</p><h4 id="WAR"><a href="#WAR" class="headerlink" title="WAR"></a>WAR</h4><p>Web Archive File，用于Web方面的包，包含了.class文件，配置信息以及描述网络服务器（如Tomcat）。</p><h4 id="EAR"><a href="#EAR" class="headerlink" title="EAR"></a>EAR</h4><p>Enterprise Archive File，为J2EE程序创建的JAR文件。</p><h4 id="AAR"><a href="#AAR" class="headerlink" title="AAR"></a>AAR</h4><p>Android Archive File，用于Android平台的包文件，不仅包含.class文件，还可以包含界面等资源文件。含有AndroidManifest.xml，classes.jar，res，R.txt等文件。</p><h3 id="JVM"><a href="#JVM" class="headerlink" title="JVM"></a>JVM</h3><p>Java Virtual Machine，用于执行编译生成的.class文件，内存管理，垃圾收集等。关于JVM的话题十分庞大并且深入，这篇文章不做深入探究了。不过想对于Android的DVM（Dalvik Virtual Machine）做一下简单的比较。JVM执行的是.class文件，DVM执行的是dex文件，dex文件是将.class文件整合在一起的，因此运行速度更快，可以使用dex2jar工具将dex文件转换成jar文件。而apk是将dex文件和资源一起打包后的文件，一般一个apk只有一个dex文件，但是由于dex文件65535的方法数限制，现在也出现了多dex的解决方案。apk文件中包含AndroidManifest.xml，classes.dex，res，resources.arsc，META-INF这些文件，从这可以看出确实是包含了dex文件和资源文件。</p><h3 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h3><p>总结了一下在Java环境下生存的最基础的知识。虽然我也不怎么喜欢Java语言，但是Java平台毕竟诞生了这么多伟大的东西，我的心态也应该从之前的嫌弃和抵触变成积极地拥抱，多学点总是没错的。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在工作中从C++转到使用Java有一段时间了。Java语言与C++十分相似，Effective C++中说，C++作为一个语言联邦，其中包含C，Object-Oriented C++，Template C++和STL。而Java的面向对象对比C++的OO和数据容器如List、Set、Map对比C++的STL，这两方面两种语言除去语言本身的一些细节几乎可以无缝转换。&lt;/p&gt;
&lt;p&gt;但是本文讨论的不是Java语言层面的内容，之前看了一篇叫做&lt;a href=&quot;http://hadihariri.com/2013/12/29/jvm-minimal-survival-guide-for-the-dotnet-developer/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;JVM Minimal Survival Guide&lt;/a&gt;的文章，将.NET平台与Java平台作对比，里面介绍了JVM的一些概念和Java在各个领域的一些杀手级应用。我也想自上而下地整理一下在Java环境中生存的基础知识，可以看成是那篇文章Basic部分的一些补充。&lt;br&gt;
    
    </summary>
    
      <category term="编程语言" scheme="http://yoursite.com/categories/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"/>
    
    
      <category term="Java" scheme="http://yoursite.com/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>我如何用VS2005编辑代码</title>
    <link href="http://yoursite.com/2015/08/19/%E6%88%91%E5%A6%82%E4%BD%95%E7%94%A8VS2005%E7%BC%96%E8%BE%91%E4%BB%A3%E7%A0%81/"/>
    <id>http://yoursite.com/2015/08/19/我如何用VS2005编辑代码/</id>
    <published>2015-08-19T13:21:04.000Z</published>
    <updated>2018-05-16T09:01:02.365Z</updated>
    
    <content type="html"><![CDATA[<p>之前我是一个Vim重度使用者，到了公司不可避免地要使用Visual Studio2005作为主要开发环境。VS作为IDE，有很多Vim这种编辑器不可比拟的优势，精确地代码跳转，代码提示，集成编译器，调试器以及众多代码调试工具，方便地构建代码工程。但是Vim独有的键绑定带来的编辑文本的高效率也是我无法割舍的。</p><p>经过一番研究，我在VS2005上安装了Visual AssistX和Viemu两个插件让我将VS和Vim完美结合起来。<br><a id="more"></a></p><h3 id="Visual-AssistX"><a href="#Visual-AssistX" class="headerlink" title="Visual AssistX"></a>Visual AssistX</h3><p>这应该是VS上最强大的第三方插件了，装上它之后能够使用更强大的符号搜索，代码提示，代码高亮，函数跳转，拼写检查，括号检查等等。</p><h3 id="Viemu"><a href="#Viemu" class="headerlink" title="Viemu"></a>Viemu</h3><p>支持VS2005的Vim插件，支持大部分Vim键绑定，少量快捷键会与VS冲突，但是基本都是我不会用到的。包括代码搜索，正则表达式匹配这些功能Viemu都能完美支持，但是分屏功能好像不能用。</p><h3 id="常用快捷键"><a href="#常用快捷键" class="headerlink" title="常用快捷键"></a>常用快捷键</h3><p>这些是我在编辑代码时最常用的一些快捷键。使用这些编辑代码基本可以不用鼠标了，并且编辑代码时双手基本上在主键盘区域活动。</p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">hjkl: 光标方向</span></span><br><span class="line"><span class="section">Ctrl-u: 向上翻半屏</span></span><br><span class="line"><span class="section">Ctrl-d: 向下翻半屏</span></span><br><span class="line"><span class="section">x: 删除当前字符</span></span><br><span class="line"><span class="section">(n)dd: 删除n行，并保存在剪贴板中</span></span><br><span class="line"><span class="section">(n)yy: 拷贝n行</span></span><br><span class="line"><span class="section">p: 粘贴</span></span><br><span class="line"><span class="section">u: 撤销</span></span><br><span class="line"><span class="section">Ctrl-r: 重做</span></span><br><span class="line"><span class="section">Ctrl-s: 保存</span></span><br><span class="line"><span class="section">o: 在当前行下面新起一行</span></span><br><span class="line"><span class="section">O: 在当前行上面新起一行</span></span><br><span class="line"><span class="section">v: 选择块</span></span><br><span class="line"><span class="section">Shift-v: 选择多行</span></span><br><span class="line"><span class="section">w: 跳到下一个单词首</span></span><br><span class="line"><span class="section">e: 跳到下一个单词尾</span></span><br><span class="line"><span class="section">b: 跳到上一个单词首</span></span><br><span class="line"><span class="section">diw: 删除单词</span></span><br><span class="line"><span class="section">yiw: 复制单词</span></span><br><span class="line"><span class="section">viw: 选中单词</span></span><br><span class="line"><span class="section">dw: 删除单词剩余部分</span></span><br><span class="line"><span class="section">d$: 删除当前行剩余部分</span></span><br><span class="line"><span class="section">0: 跳到行首</span></span><br><span class="line"><span class="section">$: 跳到行尾</span></span><br><span class="line"><span class="section">Alt-m: 打开成员列表</span></span><br><span class="line"><span class="section">Alt-Shift-f: 查找符号</span></span><br><span class="line"><span class="section">Ctrl-tab: 选择下一标签页</span></span><br><span class="line"><span class="section">Ctrl-Shift-tab: 选择上一标签页</span></span><br><span class="line"><span class="section">Alt-Shift-o: 打开文件</span></span><br><span class="line"><span class="section">Alt-F6: 跳转到下一窗口</span></span><br><span class="line"><span class="section">Alt－g: 跳转到定义</span></span><br><span class="line"><span class="section">Alt-Shift-q: 打开重构目录</span></span><br><span class="line"><span class="section">Atl-Shift-r: 重命名</span></span><br></pre></td></tr></table></figure><p>有了VS2005+VAX+Viemu这个套餐，就相当于世界上最强大的IDE配合上世界上最强大的编辑器。极大地提高了我的工作效率。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;之前我是一个Vim重度使用者，到了公司不可避免地要使用Visual Studio2005作为主要开发环境。VS作为IDE，有很多Vim这种编辑器不可比拟的优势，精确地代码跳转，代码提示，集成编译器，调试器以及众多代码调试工具，方便地构建代码工程。但是Vim独有的键绑定带来的编辑文本的高效率也是我无法割舍的。&lt;/p&gt;
&lt;p&gt;经过一番研究，我在VS2005上安装了Visual AssistX和Viemu两个插件让我将VS和Vim完美结合起来。&lt;br&gt;
    
    </summary>
    
      <category term="工具" scheme="http://yoursite.com/categories/%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="Visual Studio" scheme="http://yoursite.com/tags/Visual-Studio/"/>
    
  </entry>
  
  <entry>
    <title>Markdown测试</title>
    <link href="http://yoursite.com/2015/07/27/Markdown%E6%B5%8B%E8%AF%95/"/>
    <id>http://yoursite.com/2015/07/27/Markdown测试/</id>
    <published>2015-07-27T14:34:14.000Z</published>
    <updated>2018-05-16T09:01:02.365Z</updated>
    
    <content type="html"><![CDATA[<p>#兼容HTML<br>这是一个普通段落</p><table><br>    <tr><br>        <td>Foo</td><br>    </tr><br></table><p>这是另一个普通段落</p><p>#特殊字符自动转换<br>&copy; AT&amp;T AT&amp;T 4&lt;5 4&lt;5</p><p>#标题</p><p>##Select形式</p><h1 id="This-is-an-H1"><a href="#This-is-an-H1" class="headerlink" title="This is an H1"></a>This is an H1</h1><h2 id="This-is-an-H2"><a href="#This-is-an-H2" class="headerlink" title="This is an H2"></a>This is an H2</h2><a id="more"></a><p><br></p><p>##Atx形式</p><p>#这是H1</p><p>##这是H2</p><p>###这是H3</p><p>####这是H4</p><p>#####这是H5</p><p>######这是H6</p><p>#区块引用Blockquotes</p><blockquote><p>This is a blockquote with two paragraphs. Lorem ipsum dolor sit amet,<br>consectetuer adipiscing elit. Aliquam hendrerit mi posuere lectus.<br>Vestibulum enim wisi, viverra nec, fringilla in, laoreet vitae, risus.</p><p>Donec sit amet nisl. Aliquam semper ipsum sit amet velit. Suspendisse<br>id sem consectetuer libero luctus adipiscing.<br><br><br><br>This is a blockquote with two paragraphs. Lorem ipsum dolor sit amet,<br>consectetuer adipiscing elit. Aliquam hendrerit mi posuere lectus.<br>Vestibulum enim wisi, viverra nec, fringilla in, laoreet vitae, risus.</p></blockquote><blockquote><p>Donec sit amet nisl. Aliquam semper ipsum sit amet velit. Suspendisse<br>id sem consectetuer libero luctus adipiscing.<br><br><br><br>This is the first level of quoting.</p><blockquote><p>This is nested blockquote.</p></blockquote><p>Back to the first level.</p></blockquote><p><br></p><blockquote><h2 id="这是一个标题。"><a href="#这是一个标题。" class="headerlink" title="这是一个标题。"></a>这是一个标题。</h2><ol><li>这是第一行列表项。</li><li>这是第二行列表项。</li></ol><p>给出一些例子代码：</p><pre><code>return shell_exec(&quot;echo $input | $markdown_script&quot;);</code></pre></blockquote><p>#列表</p><ul><li>Red</li><li>Green</li><li>Blue</li></ul><ul><li>Red</li><li>Green</li><li>Blue</li></ul><ul><li>Red</li><li>Green</li><li>Blue</li></ul><ol><li>Bird</li><li>McHale</li><li>Parish</li></ol><ul><li>Lorem ipsum dolor sit amet, consectetuer adipiscing elit.<br>Aliquam hendrerit mi posuere lectus. Vestibulum enim wisi,<br>viverra nec, fringilla in, laoreet vitae, risus.</li><li>Donec sit amet nisl. Aliquam semper ipsum sit amet velit.<br>Suspendisse id sem consectetuer libero luctus adipiscing.</li></ul><ol><li><p>This is a list item with two paragraphs. Lorem ipsum dolor<br>sit amet, consectetuer adipiscing elit. Aliquam hendrerit<br>mi posuere lectus.</p><p>Vestibulum enim wisi, viverra nec, fringilla in, laoreet<br>vitae, risus. Donec sit amet nisl. Aliquam semper ipsum<br>sit amet velit.</p></li><li><p>Suspendisse id sem consectetuer libero luctus adipiscing.</p></li></ol><ul><li><p>A list item with a blockquote:</p><blockquote><p>This is a blockquote<br>inside a list item.</p></blockquote></li></ul><p>#分割线</p><hr><hr><p>#区段元素<br>This is <a href="http://example.com/" title="Title" target="_blank" rel="noopener">an example</a> inline link.</p><p><a href="http://example.net/" target="_blank" rel="noopener">This link</a> has no title attribute.</p><p>See my <a href="/about/">About</a> page for details.</p><p>This is [an example][id] reference-style link.<br>[id]: <a href="http://example.com/" target="_blank" rel="noopener">http://example.com/</a>  “Optional Title Here”</p><p><a href="http://google.com/" title="Google" target="_blank" rel="noopener">Google</a><br><a href="http://google.com/" title="Google" target="_blank" rel="noopener">Google</a>: <a href="http://google.com/" target="_blank" rel="noopener">http://google.com/</a><br><br><br>I get 10 times more traffic from <a href="http://google.com/" title="Google" target="_blank" rel="noopener">Google</a> than from<br><a href="http://search.yahoo.com/" title="Yahoo Search" target="_blank" rel="noopener">Yahoo</a> or <a href="http://search.msn.com/" title="MSN Search" target="_blank" rel="noopener">MSN</a>.</p><p>#强调<br><em>single asterisks</em></p><p><em>single underscores</em></p><p><strong>double asterisks</strong></p><p><strong>double underscores</strong></p><p>un<em>frigging</em>believable</p><p>*this text is surrounded by literal asterisks*</p><p>#代码<br>Use the <code>printf()</code> function.</p><p><code>There is a literal backtick (`) here.</code></p><p>A single backtick in a code span: <code>`</code></p><p>A backtick-delimited string in a code span: <code>`foo`</code></p><p>Please don’t use any <code>&lt;blink&gt;</code> tags.</p><p><code>&amp;#8212;</code> is the decimal-encoded equivalent of <code>&amp;mdash;</code>.</p><p>#图片<br><img src="/path/to/img.jpg" alt="Alt text"></p><p><img src="/path/to/img.jpg" alt="Alt text" title="Optional title"></p><p>#其他<br><a href="http://example.com/" target="_blank" rel="noopener">http://example.com/</a></p><p><a href="mailto:&#x61;&#100;&#100;&#114;&#x65;&#x73;&#x73;&#64;&#x65;&#x78;&#97;&#109;&#112;&#x6c;&#x65;&#46;&#99;&#111;&#109;" target="_blank" rel="noopener">&#x61;&#100;&#100;&#114;&#x65;&#x73;&#x73;&#64;&#x65;&#x78;&#97;&#109;&#112;&#x6c;&#x65;&#46;&#99;&#111;&#109;</a></p><p>*literal asterisks*</p><p>Markdown 支持以下这些符号前面加上反斜杠来帮助插入普通的符号：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">\   反斜线</span><br><span class="line">`   反引号</span><br><span class="line"><span class="bullet">*   </span>星号</span><br><span class="line">_   底线</span><br><span class="line">&#123;&#125;  花括号</span><br><span class="line">[]  方括号</span><br><span class="line">()  括弧</span><br><span class="line"><span class="section">#   井字号</span></span><br><span class="line"><span class="bullet">+   </span>加号</span><br><span class="line"><span class="bullet">-   </span>减号</span><br><span class="line">.   英文句点</span><br><span class="line">!   惊叹号</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;#兼容HTML&lt;br&gt;这是一个普通段落&lt;/p&gt;
&lt;table&gt;&lt;br&gt;    &lt;tr&gt;&lt;br&gt;        &lt;td&gt;Foo&lt;/td&gt;&lt;br&gt;    &lt;/tr&gt;&lt;br&gt;&lt;/table&gt;

&lt;p&gt;这是另一个普通段落&lt;/p&gt;
&lt;p&gt;#特殊字符自动转换&lt;br&gt;&amp;copy; AT&amp;amp;T AT&amp;amp;T 4&amp;lt;5 4&amp;lt;5&lt;/p&gt;
&lt;p&gt;#标题&lt;/p&gt;
&lt;p&gt;##Select形式&lt;/p&gt;
&lt;h1 id=&quot;This-is-an-H1&quot;&gt;&lt;a href=&quot;#This-is-an-H1&quot; class=&quot;headerlink&quot; title=&quot;This is an H1&quot;&gt;&lt;/a&gt;This is an H1&lt;/h1&gt;&lt;h2 id=&quot;This-is-an-H2&quot;&gt;&lt;a href=&quot;#This-is-an-H2&quot; class=&quot;headerlink&quot; title=&quot;This is an H2&quot;&gt;&lt;/a&gt;This is an H2&lt;/h2&gt;
    
    </summary>
    
      <category term="测试" scheme="http://yoursite.com/categories/%E6%B5%8B%E8%AF%95/"/>
    
    
      <category term="测试" scheme="http://yoursite.com/tags/%E6%B5%8B%E8%AF%95/"/>
    
  </entry>
  
</feed>
